Checker Challenge 跳棋的挑战
 描述检查一个如下的6 x 6的跳棋棋盘，有六个棋子被放置在棋盘上，使得每行、每列最多有一个，每条对角线(包括两条主对角线的所有平行线)上至多有一个棋子。
0   1   2   3   4   5   6
  -------------------------
1 |   | O |   |   |   |   |
  -------------------------
2 |   |   |   | O |   |   |
  -------------------------
3 |   |   |   |   |   | O |
  -------------------------
4 | O |   |   |   |   |   |
  -------------------------
5 |   |   | O |   |   |   |
  -------------------------
6 |   |   |   |   | O |   |
  -------------------------上面的布局可以用序列2 4 6 1 3 5来描述，第i个数字表示在第i行的相应位置有一个棋子，如下： 
行号 1 2 3 4 5 6 
列号 2 4 6 1 3 5 
这只是跳棋放置的一个解。请编一个程序找出所有跳棋放置的解。并把它们以上面的序列方法输出。解按字典顺序排列。请输出前3个解。最后一行是解的总个数。 
特别注意: 对于更大的N(棋盘大小N x N)你的程序应当改进得更有效。不要事先计算出所有解然后只输出(或是找到一个关于它的公式），这是作弊。如果你坚持作弊，那么你登陆USACO Training的帐号将被无警告删除
 格式测试时间: 1s
程序名: checker
输入格式:
(checker.in)
一个数字N (6 <= N <= 13) 表示棋盘是N x N大小的。 
输出格式:
(checker.out)
前三行为前三个解，每个解的两个数字之间用一个空格隔开。第四行只有一个数字，表示解的总数。
 SAMPLE INPUT6 
 SAMPLE OUTPUT2 4 6 1 3 5 
3 6 2 5 1 4 
4 1 5 2 6 3 
4
 Hint1使用递归：
function placequeen(column) {   # place columns 0..max-1
	if (column == max) { deal with answer; return; }
        for (row = 0; row < max; row++)  {
            if (canplacequeen (row)) {
		mark queen placed at column,row;
		placequeen(column+1);
		un-mark queen placed at column,row;
	    }
        }
    } Hint2尽量减少频繁搜索的次数。通常最好的方法是以空间换时间。当检测某个皇后能否放在某一行时，存一个数组表示是否有皇后已经被放在那儿：
function placequeen(column) {   # place columns 0..max-1
	if (column == max) { deal with answer; return; }
        for (row = 0; row < max; row++)  {
            if (rowok[row] && canplacequeen(row,column)) {
		rowok[row] = 1;
		mark queen placed at column,row;
		placequeen(column+1);
		un-mark queen placed at column,row;
		rowok[row] = 0;
	    }
        }
    } Hint3使用“让一切绝对化（absolutely everything）” (在搜索中)您能避免程序中频繁的重复。不仅要记录下合法的皇后所在的那一行，还要标记所在的两条对角线(也就是象‘/’和‘\’的两条）使用大小为2*max - 1的布尔数组来判断其他皇后所在的对角线是否合法。
 Hint4对称： 您能否通过利用旋转、对称来削减一半或3/4的枚举量 ？ [提示：能]

 Hint5还是超时吗？如果你已经编好各个模块并且有检查对角线的子程序或者还有别的，把它们的代码移动到主过程中，调用子程序的消耗很重要。
 Hint6多数成功的Java题解用位运算存储“用过的行（列、对角线）”。
