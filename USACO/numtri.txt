/*
ID:84145022
LANG:C
TASK:numtri
*/
#include<stdio.h>
long max(long a,long b)
{
     if(a>b)return a;else return b;
}
long a[1000][1000];
int main()
{
    long i,j,n;
    freopen("numtri.in","r",stdin);freopen("numtri.out","w",stdout);
    scanf("%ld",&n);
    for(i=0;i<n;i++)
       for(j=0;j<=i;j++)
           scanf("%ld",&a[i][j]);
    for(i=n-2;i>=0;i--)
        for(j=0;j<=i;j++)
            a[i][j]+=max(a[i+1][j],a[i+1][j+1]);
    printf("%ld\n",a[0][0]);
    return 0;
}
/*这个代码c与c++通吃啊……再发一遍
代码相当精短了吧……内存也不错
Compiling...
Compile: OK
 
Executing...
   Test 1: TEST OK [0.022 secs, 6704 KB]
   Test 2: TEST OK [0.022 secs, 6704 KB]
   Test 3: TEST OK [0.000 secs, 6704 KB]
   Test 4: TEST OK [0.000 secs, 6704 KB]
   Test 5: TEST OK [0.022 secs, 6704 KB]
   Test 6: TEST OK [0.011 secs, 6704 KB]
   Test 7: TEST OK [0.043 secs, 6704 KB]
   Test 8: TEST OK [0.011 secs, 6704 KB]
   Test 9: TEST OK [0.356 secs, 6704 KB]
 
All tests OK.
事实证明c比c++快，内存也用得少（去看看C代码吧）
某海豚到此一游
*//*
ID:ybojan2
LANG:C++
TASK:numtri
*/
 
#include <iostream>
#include <fstream>
 
using namespace std;
 
int n,dat[1001][1001],dp[1001][1001];
 
int main()
{
    ifstream fin("numtri.in");
    ofstream fout("numtri.out");
 
 
    fin>>n;
 
    for (int i=1;i<=n;i++)
    {
        for (int j=1;j<=i;j++)
        {
            fin>>dat[i][j];
            if (i==n) dp[i][j]=dat[i][j];
        }
    }
    for (int i=n-1;i>=1;i--)
    {
        for (int j=1;j<=i;j++)
        {
            dp[i][j]=max(dp[i+1][j],dp[i+1][j+1])+dat[i][j];
        }
    }
    fout<<dp[1][1]<<endl;
    return 0;
}/*
ID: MasterRay
LANG: C++
TASK: numtri
*/
 
#include <algorithm>
#include <cstdio>
using namespace std;
 
int s[2][1000];
 
int main()
{
	int n, t;
	freopen("numtri.in", "r", stdin);
	freopen("numtri.out", "w", stdout);
	scanf("%d%d", &n, &s[0][0]);
	for (int i = 1; i < n; ++i)
	{
		scanf("%d", &t);
		s[i&1][0] = s[i-1&1][0]+t;
		for (int j = 1; j < i; ++j)
		{
			scanf("%d", &t);
			s[i&1][j] = max(s[i-1&1][j-1], s[i-1&1][j])+t;
		}
		scanf("%d", &t);
		s[i&1][i] = s[i-1&1][i-1]+t;
	}
	printf("%d\n", *max_element(s[n-1&1], s[n-1&1]+n));
}
 
#include<fstream>
using namespace std;
ifstream fin("tringle.in");
ofstream fout("tringle.out");
int a[1001][1001];
int main()
{   int n,i,j,x;
    fin>>n;
    for(i=0;i<n;i++)
       for(j=0;j<=i;j++)
          fin>>a[i][j];
    for(i=n-2;i>=0;i--)
       for(j=0;j<=i;j++)
          if(a[i+1][j]>a[i+1][j+1])
            a[i][j]+=a[i+1][j];
          else
             a[i][j]+=a[i+1][j+1];
    x=a[0][0];
    fout<<x;
    return 0;
}/*
ID: richeir2
PROG: numtri
LANG: C++
*/
#include <fstream>
using namespace std;
ifstream fi("numtri.in");
ofstream fo("numtri.out");
 
int n;
int s[1001][1001];
//int path[1001][1001];
int f[1001][1001];
int t,t1,t2;
 
void input()
{
     fi>>n;
     memset( s,0,sizeof(s) );
     for( int i=1;i<=n;i++ )
        for( int j=1;j<=i;j++ ){
           fi>>s[i][j];
           f[i][j]=s[i][j];
        }
     //memset( path,0,sizeof(path) );
}
 
void solve()
{
     for( int i=n-1;i>=1;i-- )
        for( int j=1;j<i+1;j++ ){
             t1=s[i][j]+s[i+1][j];
             t2=s[i][j]+s[i+1][j+1];
             if( t1>s[i][j] ){
                 s[i][j]=t1;
                 //path[i][j]=0;
             }
             if( t2>s[i][j] ){
                 s[i][j]=t2;
                 //path[i][j]=1;
             }
        }
     fo<<s[1][1]<<endl;
     //输出路径
     /* 
     int p=1;
     for( int i=1;i<=n;i++ )
        for( int j=1;j<=n;j++ ){
             fo<<path[i][j]<<" ";
             if( j==n )
                 fo<<endl;
        }
     fo<<endl;
     for( int i=1;i<=n;i++ ){
          fo<<f[i][p]<<" ";
          p+=path[i][p];
     }
     */
}
 
 
int main()
{
    input();
    solve();
 
    return 0;
}
//Program By Richeir 23-10-08 21:33/*
ID:herohan1
LANG:C++
TASK:numtri
*/
 
USER: wang sh [herohan1]
TASK: numtri
LANG: C++
 
Compiling...
Compile: OK
 
Executing...
   Test 1: TEST OK [0.011 secs, 6764 KB]
   Test 2: TEST OK [0.000 secs, 6764 KB]
   Test 3: TEST OK [0.000 secs, 6764 KB]
   Test 4: TEST OK [0.000 secs, 6764 KB]
   Test 5: TEST OK [0.022 secs, 6768 KB]
   Test 6: TEST OK [0.011 secs, 6764 KB]
   Test 7: TEST OK [0.022 secs, 6764 KB]
   Test 8: TEST OK [0.000 secs, 6760 KB]
   Test 9: TEST OK [0.216 secs, 6764 KB]
 
All tests OK.
 
 
#include<fstream>
#include <iostream>
 
using namespace std;
 
class numTriangle{
	int rows;
	int nums[500501];
	int partial_max[500501];
    int count;
	int MAX;
public:
	numTriangle(ifstream& infile){
		infile>>rows;
	    count=(1+rows)*rows/2.0;
		MAX=0;
		for(int i=1;i<=count;i++)
			infile>>nums[i];
	}
 
    int max(int a,int b){
		return a>b ? a : b;
	}
 
	void  cal(){
		for(int row=rows;row>0;row--)
			for(int index=1+row*(row-1)/2;index<=(row+1)*row/2;index++){
				if(row==rows)
		        	partial_max[index]=nums[index];
				else
					partial_max[index]=nums[index]+max(partial_max[index+row],partial_max[index+row+1]);
		}
	}
 
 
 
 
	int maxSum(){
		return partial_max[1];
	}
};
 
 
int main(){
	ifstream infile("numtri.in");
	ofstream outfile("numtri.out");
	numTriangle NT(infile);
	NT.cal();
	int max=NT.maxSum();
	outfile<<max<<endl;
	return 0;
}