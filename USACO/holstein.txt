/*
ID:ybojan2
LANG:C++
TASK:holstein
*/
 
#include <iostream>
#include <fstream>
 
using namespace std;
 
int n,v[26],m,g[16][26],now[26],res[16],dat[16],minn=2147483647;
 
void dfs(int deep,int count)
{
     if (deep==m+1)
     {
                   for (int i=1;i<=n;i++)
                       if (now[i]<v[i]) return ;
                   if (count<minn)
                   {
                                 minn=count;
                                 for (int i=1;i<=minn;i++)
                                     res[i]=dat[i];
                   }
                   return ;
     }
     for (int i=1;i<=n;i++)
         now[i]+=g[deep][i];
     dat[count+1]=deep;
     dfs(deep+1,count+1);
     for (int i=1;i<=n;i++)
         now[i]-=g[deep][i];
     dfs(deep+1,count);
}
 
int main()
{
    ifstream fin("holstein.in");
    ofstream fout("holstein.out");
 
    fin>>n;
    for (int i=1;i<=n;i++)
        fin>>v[i];
    fin>>m;
    for (int i=1;i<=m;i++)
    {
        for (int j=1;j<=n;j++)
            fin>>g[i][j];
    }
    for (int i=1;i<=n;i++)
        now[i]=0;
    dfs(1,0);
    fout<<minn;
    for (int i=1;i<=minn;i++)
        fout<<" "<<res[i];
    fout<<endl;
    return 0;
}/*
ID:GeorgeG1
PROB:holstein
LANG:C++
*/
#include <fstream>
#include <cstdlib>
 
using namespace std;
 
ifstream fin ("holstein.in");
ofstream fout ("holstein.out");
 
const long MAXLONGINT=999999999;
 
long need[26];
long food[16][26];
long n,c;
long minc=MAXLONGINT,minstate=0;
 
void init()
{
     fin >>n;
     for (long i=0;i<n;i++)
         fin >>need[i];
     fin >>c;
     for (long i=0;i<c;i++)
         for (long j=0;j<n;j++)
             fin >>food[i][j];
     return;
}
 
/*
state
  0
  0
  0
  0
  1
  0
  1
  0    <- level=1 (2^1)
  1    <- level=0 (2^0)
 
搜索＋cut＋位运算 
*/
 
bool record(long state)
{
     long t=0,tState=state,i=0;
     long fed[26];
     memset (fed,0,sizeof(fed));
     while (tState>0)
     {
           if (tState&1)
           {
              t++;
              for (long j=0;j<n;j++)
                  fed[j]+=food[i][j];
           }
           tState>>=1;
           i++;
     }
     for (long j=0;j<n;j++)
         if (fed[j]<need[j]) return false;       //如果fed小于need,直接返回 
     if (t<minc)
     {
        minc=t;
        minstate=state;
     }
     return true;
}
 
void run(long state,long level)
{
     if (record(state)) return;
     if (level==c) return;
     run(state+(1<<level),level+1);
     run(state,level+1);
     return;
}
 
int main()
{
    init();
    run(0,0);
    fout <<minc;
    for (long i=0;i<c;i++)
        if ((minstate>>i)&1) fout <<' ' <<i+1;
    fout <<endl;
    return 0;
}