/*
ID:ybojan2
LANG:C++
TASK:fence
*/
#include <iostream>
#include <fstream>
 
using namespace std;
 
int d[1001],map[1001][1001],f,n,cnt,res[1000000];
 
void go(int v)
{
     for (int i=1;i<=n;i++)
         if (map[v][i]>0){
                          map[v][i]--;
                          map[i][v]--;
                          go(i);
                          }
     cnt++;
     res[cnt]=v;
}
 
int main()
{
    ifstream fin("fence.in");
    ofstream fout("fence.out");
    memset(d,0,sizeof(d));
    memset(map,0,sizeof(map));
    memset(res,0,sizeof(res));
    fin>>f;
    n=0;
    for (int i=1;i<=f;i++)
    {
        int x,y;
        fin>>x>>y;
        map[x][y]++;
        map[y][x]++;
        d[x]++;
        d[y]++;
        n=max(max(n,x),y);
    }
    int find=0;
    cnt=0;
    for (int i=1;i<=n;i++)
        if (d[i]%2==1){
                       find=i;
                       break;
                       }
    if (find==0){
                 for (int i=1;i<=n;i++)
                     if (d[i]>0){
                                 find=i;
                                 break;
                                 }
                 }
    go(find);
    for (int i=cnt;i>=1;i--)
        fout<<res[i]<<endl;
    return 0;
}/*
ID: cmykrgb1
PROG: fence
LANG: C++
*/
#include <iostream>
#include <fstream>
#define MAXN 501
using namespace std;
ifstream fi("fence.in");
ofstream fo("fence.out");
long dis[MAXN][MAXN];
long degree[MAXN];
long ccnt=0,f,fmax=0;;
long Circuit[1026];
 
void init()
{
	long i;
	fi>>f;
	for (i=1;i<=f;i++)
	{
		long a,b;
		fi>>a>>b;
		dis[a][b]++;
		dis[b][a]++;
		degree[a]++;
		degree[b]++;
		if (a>fmax) fmax=a;
		if (b>fmax) fmax=b;
	}
}
 
void search_euler(long k)
{
	long i;
	for (i=1;i<=fmax;i++)
	{
		if (dis[k][i])
		{
			dis[k][i]--;
			dis[i][k]--;
			search_euler(i);
		}
	}
	Circuit[ ++ccnt]=k;
}
 
void euler()
{
	long i,s=1;
	bool cir;
	for (i=1;i<=fmax;i++)
	{
		if (degree[i]%2==1)
		{
			s=i;
			break;
		}
	}
	search_euler(s);
}
 
void print()
{
	long i;
	for (i=f+1;i>=1;i--)
		fo << Circuit[i] << endl;
	fi.close();
	fo.close();
}
 
int main()
{
	init();
	euler();
	print();
	return 0;
}/*
ID:GeorgeG1
PROB:fence
LANG:C++
*/
/*
DFS+剪枝 
一、确定起点 
分2类讨论
1、图中有且仅有2个奇数点（与之相连的路径个数为奇数的节点） 
先找出两个奇数点，以编号较小的点作为起点，另一个为终点。
2、图中没有奇数点
以编号最小的点作为起点和终点。 
二、贪心DFS+剪枝
0、检查边的遍历情况，若已全部遍历则输出遍历序列，然后exit(0)。 
1、floodfill一次，判断从当前点能否遍历剩余的所有边，若不能，则返回；若能，则继续。 
2、从小到大逐个枚举当前点能到达的点，将连向该点的边①删除，并对该点执行DFS。
3、若DFS过程返回，则恢复边①，继续枚举下一个点。
*/
#include <fstream>
#include <cstdlib>
#include <iomanip>
#include <string.h>
 
using namespace std;
 
ifstream fin ("fence.in");
ofstream fout ("fence.out");
 
const long MAXN=510,MAXF=1550;
 
long mapS[MAXN][MAXN];
long nodeCounter[MAXN];
long n;
long path[MAXF],upPath;
 
void init()
{
     fin >>n;
     memset(mapS,0,sizeof(mapS));
     memset(nodeCounter,0,sizeof(nodeCounter));
     long a,b;
     for (long i=0;i<n;++i)
     {
         fin >>a >>b;
         ++mapS[a][b];
         ++mapS[b][a];
         ++nodeCounter[a];
         ++nodeCounter[b];
     }
     upPath=-1;
     return;
}
 
long getStart()     //获取起点 
{
     long oddCounter=0,minOdd=MAXN;
     for (long i=1;i<MAXN;++i)
         if (nodeCounter[i]&1)
         {
            ++oddCounter;
            if (minOdd==MAXN) minOdd=i;
         }
     if (oddCounter==2)
        return minOdd;
     else if (oddCounter==0)
          return 1;
     else
     {
         fout <<"getStart Error:oddCounter=" <<oddCounter <<endl;
         return -1;
     }
}
 
bool floodfill(long node)
{
     long stack[MAXN],top=-1;
     bool vis[MAXN];
     memset(vis,0,sizeof(vis));
     stack[++top]=node;
     vis[node]=true;
     while (top>-1)
     {
           node=stack[top--];
           for (long i=1;i<MAXN;++i)
           {
               if (mapS[node][i] && !vis[i])
               {
                  stack[++top]=i;
                  vis[i]=true;
               }
           }
     }
     for (long i=1;i<MAXN;++i)
         if (!vis[i] && nodeCounter[i])
         {
            return false;
         }
     return true;
} 
 
 
void DFS(long node)
{
     if (upPath==n)                    //如果路径长度等于F+1则输出路径 并exit(0) 
     {
        for (long i=0;i<=upPath;++i)
            fout <<path[i] <<endl;
        exit(0);
     }
 
     if (!floodfill(node))     //若无法遍历剩余全图则返回 
     {
        return;
     }
 
     for (long i=1;i<MAXN;++i)    //枚举点
     {
         if (mapS[node][i]) 
         {
            //删边
            --mapS[node][i];
            --mapS[i][node];
            --nodeCounter[i];
            --nodeCounter[node];
 
            path[++upPath]=i;         
            DFS(i);
            --upPath;
            //恢复边 
            ++mapS[node][i];
            ++mapS[i][node];
            ++nodeCounter[i];
            ++nodeCounter[node];
         }
     }
     return;
}
 
int main()
{
    init();
    path[++upPath]=getStart();
    DFS(path[upPath]);
    return 0;
}/*
ID:GeorgeG1
PROB:fence
LANG:C++
*/
/*
Fleury
***********************************
Procedure Euler-circuit (start);
Begin
  For 顶点start的每个邻接点v Do
      If 边(start,v)未被标记 Then Begin
         将边(start,v)作上标记;
         将边(v,start)作上标记;                  
         Euler-circuit (v);
         将边(start,v)加入栈S;
      End;
End;
***********************************
逆序输出S的内容 
*/
#include <fstream>
#include <cstdlib>
#include <iomanip>
#include <string.h>
 
using namespace std;
 
ifstream fin ("fence.in");
ofstream fout ("fence.out");
 
const long MAXN=510,MAXF=1550;
 
struct graph
{
	   long graphSize,allop_pt;
	   struct edge
       {
              long num;
   		      long j;
   		      edge *pre;
	   		  edge *next;
       }*g[MAXN],*pool;
       graph (long edge_num)
       {
	   		 memset(g,0,sizeof(g));
	   		 graphSize=2*edge_num+10;
	   		 pool=new edge[graphSize];
		     allop_pt=0;
       }
       ~graph ()
       {
              delete[] pool;			
	   }
	   inline edge* new_edge (long j,long num,edge* next)
       {
              if (allop_pt>=graphSize) fout <<"graph Overflow!\n";
	   		  pool[allop_pt].j=j;
	   		  pool[allop_pt].num=num;
              pool[allop_pt].next=next;
	   		  if (next) next->pre=&pool[allop_pt];
	   		  return &pool[allop_pt++];
       }
	   inline edge* add_edge (long i,long j,long num)
       {
	   		  return g[i]=new_edge(j,num,g[i]);
       }
};
 
long mapS[MAXN][MAXN];
graph::edge *mapS2[MAXN][MAXN];
bool nodeCounter[MAXN];
long n;
graph mapE(MAXF);
long path[MAXF],upPath;
 
void init()
{
     fin >>n;
     memset(mapS,0,sizeof(mapS));
     memset(nodeCounter,0,sizeof(nodeCounter));
     long a,b;
     for (long i=0;i<n;++i)
     {
         fin >>a >>b;
         ++mapS[a][b];
         ++mapS[b][a];
         nodeCounter[a]=!nodeCounter[a];
         nodeCounter[b]=!nodeCounter[b];
     }
     for (long i=1;i<MAXN;++i)            //生成邻接表
     {
         mapE.add_edge(i,0,1);              //开始填入一个空边 
         for (long j=MAXN;j>0;--j)
             if (mapS[i][j])
                mapS2[i][j]=mapE.add_edge(i,j,mapS[i][j]);
         mapE.add_edge(i,0,1);              //最后填入一个空边 
     }
     upPath=-1;
     return;
}
 
long getStart()     //获取起点 
{
     long oddCounter=0,minOdd=MAXN;
     for (long i=1;i<MAXN;++i)
         if (nodeCounter[i])
         {
            ++oddCounter;
            if (minOdd==MAXN) minOdd=i;
         }
     if (oddCounter==2)
        return minOdd;
     else if (oddCounter==0)
          return 1;
     else
     {
         fout <<"getStart Error:oddCounter=" <<oddCounter <<endl;
         return -1;
     }
}
 
void DFS(long node)
{
     for (graph::edge *i=mapE.g[node]->next;i->next;i=mapE.g[node]->next)    //枚举点
     {
         //删边
         bool flag=false;
         if (i->num>1)
         {
            --i->num;
            --mapS2[i->j][node]->num;
         }else{
               i->pre->next=i->next;
               i->next->pre=i->pre;
               mapS2[i->j][node]->pre->next=mapS2[i->j][node]->next;
               mapS2[i->j][node]->next->pre=mapS2[i->j][node]->pre;
               flag=true;
         }
 
         DFS(i->j);
     }
     path[++upPath]=node;
     return;
}
 
int main()
{
    init();
    DFS(getStart());
    for (long i=upPath;i>=0;--i)
        fout <<path[i] <<endl;
    return 0;
}