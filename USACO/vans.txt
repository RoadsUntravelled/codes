#include<iostream>
using namespace std;
const int maxx=100000000;
int n;
int dp[1001][9][60];
void init()
{
	freopen("vans.in","r",stdin);
	freopen("vans.out","w",stdout);
	cin>>n;
	n--;
}
void add(int k,int v1,int v2)
{
	int i,jin;
	jin=0;
	for (i=1; i<=59; i++)
	{
		dp[k][v1][i]+=dp[k-1][v2][i]+jin;
		jin=0;
		if (dp[k][v1][i]>maxx)
		{
			jin=dp[k][v1][i]/maxx;
			dp[k][v1][i]%=maxx;
		}
	}
}
void doit()
{
	memset(dp,0,sizeof(dp));
	dp[1][3][1]=1; dp[1][7][1]=1;
	int i;
	for (i=2; i<=n; i++)
	{
		add(i,1,3); add(i,1,8);
		add(i,3,1); add(i,3,4); add(i,3,6); add(i,3,7);
		add(i,4,3);
		add(i,6,3); add(i,6,8);
		add(i,7,1); add(i,7,6);
		add(i,7,7);
		add(i,8,3); add(i,8,8);
	}
}
void print()
{
	add(n+1,2,3); add(n+1,2,8);
	add(n+1,2,3); add(n+1,2,8);
	int i,j;
	i=59;
	while (i>1 && dp[n+1][2][i]==0) i--;
	cout<<dp[n+1][2][i];
	for (j=i-1; j>=1; j--) printf("%08ld",dp[n+1][2][j]);
	cout<<endl;
}
int main()
{
	init();
	doit();
	print();
}这应该是我最后一次在nocow发USACO的代码了，今天终于通关。。
 
从8.24正式开始usaco到今天大约用了1月17天的时间，收获颇多。
 
闲话不说，这道题用递推直接AC，记得加上高精度。。
 
Compiling...
Compile: OK
 
Executing...
   Test 1: TEST OK [0.011 secs, 6964 KB]
   Test 2: TEST OK [0.000 secs, 6964 KB]
   Test 3: TEST OK [0.011 secs, 6964 KB]
   Test 4: TEST OK [0.000 secs, 6964 KB]
   Test 5: TEST OK [0.000 secs, 6964 KB]
   Test 6: TEST OK [0.011 secs, 6964 KB]
   Test 7: TEST OK [0.022 secs, 6964 KB]
   Test 8: TEST OK [0.000 secs, 6964 KB]
   Test 9: TEST OK [0.011 secs, 6964 KB]
   Test 10: TEST OK [0.011 secs, 6964 KB]
   Test 11: TEST OK [0.022 secs, 6964 KB]
 
All tests OK.
YOUR PROGRAM ('vans') WORKED FIRST TIME!  That is fantastic
-- and a rare thing.  Please accept these special automated
congratulations.
 
一个1A，很圆满的结束了这次USACO征程。。
 
/*
	ID:echooat1
	LANG:C++
	TASK:vans
	*/
#include <fstream>
#include <cstring>
#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)>(b)?(a):(b))
#define S 100000000
#define len 1006
using namespace std;
 
ifstream fin("vans.in");
ofstream fout("vans.out");
 
long f[len][len]={0};
long n=0;
 
void cheng(long* a,long *c){
	for(long i=1;i<=a[0];i++)
		c[i]=a[i]<<1;
	c[0]=a[0];
	for(long i=1;i<=a[0];i++){
		c[i+1]+=(c[i]/S);
		c[i]%=S;
	}
	if(c[c[0]+1])c[0]++;
}
void jia(long *a,long *b,long* c){
	for(long i=1;i<=max(a[0],b[0]);i++)
		c[i]=a[i]+b[i];
	c[0]=max(a[0],b[0]);
	for(long i=1;i<=c[0];i++){
		c[i+1]+=(c[i]/S);
		c[i]%=S;
	}
	if(c[c[0]+1])c[0]++;
}
void jian(long* a,long* b,long* c){
	for(long i=1;i<=max(a[0],b[0]);i++)
		c[i]=a[i]-b[i];
	c[0]=max(a[0],b[0]);
	for(long i=1;i<=c[0];i++)
		if(c[i]<0){
			c[i]+=S;
			c[i+1]--;
		}
	while(c[0]>0&&c[c[0]]==0)c[0]--;
}
int main(int argc,char** argv){
	fin >>n;
	f[1][1]=0;
	f[2][1]=2;f[2][0]=f[3][0]=f[4][0]=1;
	f[3][1]=4;
	f[4][1]=12;
	if(n<=4){
		fout <<f[n][1]<<endl;
		fin.close();
		fout.close();
		exit(0);
	}
	for(long i=5;i<=n;i++){
		long p1[len]={0},s[len]={0},p2[len]={0};
		cheng(f[i-1],p1);
		cheng(f[i-2],p2);
		jia(p1,p2,s);
		memcpy(p2,s,sizeof s);
		memset(s,0,sizeof s);		
		jia(p2,f[i-4],s);
		memcpy(p1,s,sizeof s);
		memset(p2,0,sizeof p2);
		cheng(f[i-3],p2);
		memset(s,0,sizeof s);
		jian(p1,p2,s);
		memcpy(f[i],s,sizeof s);
	}
	fout <<f[n][f[n][0]];
	for(long i=f[n][0]-1;i>=1;i--){
		long temp=f[n][i],l=0;
		while(temp>0){l++;temp/=10;}
		l=8-l;
		while(l--)fout <<0;
		fout <<f[n][i];
	}
	fout <<endl;
	return 0;
}/*
ID: zsyzgu1
PROG: vans
LANG: C++
*/
Compile: OK
 
Executing...
   Test 1: TEST OK [0.000 secs, 3300 KB]
   Test 2: TEST OK [0.000 secs, 3300 KB]
   Test 3: TEST OK [0.000 secs, 3300 KB]
   Test 4: TEST OK [0.011 secs, 3300 KB]
   Test 5: TEST OK [0.011 secs, 3300 KB]
   Test 6: TEST OK [0.022 secs, 3300 KB]
   Test 7: TEST OK [0.043 secs, 3300 KB]
   Test 8: TEST OK [0.076 secs, 3300 KB]
   Test 9: TEST OK [0.194 secs, 3300 KB]
   Test 10: TEST OK [0.313 secs, 3300 KB]
   Test 11: TEST OK [0.702 secs, 3300 KB]
 
All tests OK.
 
又慢又长的连通性DP，仅作锻炼。
 
#include<stdio.h>
#include<string.h>
 
struct state
{
    int num;
    int s[10];
    int l[10];
    int r[10];
    state()
    {
        num=0;
        memset(s,0,sizeof(s));
        memset(l,0,sizeof(l));
        memset(r,0,sizeof(r));
    }
};
int tot=0,t; state a[100];
 
struct bign
{
    int len,s[500];
    bign() { len=1; memset(s,0,sizeof(s)); }
};
 
int k; bign f[100],g[100];
int link[243];
 
int n;
 
bign add(bign &a,bign &b)
{
    bign c;
    c.len=a.len; if (b.len > c.len) c.len=b.len;
    for (int i=1;i<=c.len;i++)
    {
        c.s[i]+=a.s[i]+b.s[i];
        c.s[i+1]=c.s[i]/10;
        c.s[i]%=10;
    }
    if (c.s[c.len+1]!=0) ++c.len;
    return c;
}
 
void fill()
{
    for (int i=0;i<243;i++)
    {
        state now;
 
        int p=now.num=i;
        for (int j=1;j<=5;j++)
        {
            now.s[j]=p%3;
            p/=3;
        }
 
        int t=0,q[10]; memset(q,0,sizeof(q));
        for (int j=1;j<=5;j++)
        {
            if (now.s[j]==1)
                q[++t]=j;
            if (now.s[j]==2)
            {
                now.l[q[t]]=j;
                now.r[j]=q[t--]; 
                if (t<0) break;
            }
       }
 
       if (t==0) 
       {
          a[++tot]=now;
          link[i]=tot;
        }
    }
}
 
void init()
{
    scanf("%d",&n);
}
 
int get(int *s)
{
    int m=0,p=1;
    for (int i=1;i<=5;i++)
    {
        m+=p*s[i];
        p*=3;
    }
    return link[m];
}
 
void devo(int s1,int s2,int t1,int t2)
{
    int x=k%5;
    if (a[t].s[x]==s1 && a[t].s[x+1]==s2)
    {
        int s[10]; 
        memcpy(s,a[t].s,sizeof(s));
 
        s[x  ]=t1;
        s[x+1]=t2;
 
        if (s1==1 && s2==1) s[ a[t].l[x+1] ]=1;
        if (s1==2 && s2==2) s[ a[t].r[x] ]=2;
 
        int next=get(s); 
        f[next]=add(f[next],g[t]);
    }
}
 
void doit()
{
    f[1].s[1]=1;
    for (k=1;k<=5*n;k++)
    {
        memcpy(g,f,sizeof(g));
        memset(f,0,sizeof(f));
        if (k%5!=0)
        {
            for (t=1;t<=tot;t++)
            {
                devo(0,0,1,2);
 
                devo(2,1,0,0);
                devo(1,1,0,0); //要特殊处理 
                devo(2,2,0,0); //要特殊处理 
                if (k==5*n-1) devo(1,2,0,0); //最后收尾 
 
                devo(0,1,0,1);
                devo(0,1,1,0);
                devo(0,2,0,2);
                devo(0,2,2,0);
                devo(1,0,0,1);
                devo(1,0,1,0);
                devo(2,0,0,2);
                devo(2,0,2,0);
            }
        } else
        {
            for (t=1;t<=tot;t++)
                if (a[t].s[5]==0)
                {
                    int s[10]; 
                    memcpy(s,a[t].s,sizeof(s));
 
                    for (int i=5;i>=2;i--) 
                        s[i]=s[i-1];
                    s[1]=0;
 
                    int next=get(s);
                    f[next]=g[t];
                }
        }
    }
}
 
void ouit()
{
    bign ans;
    ans=add(f[1],f[1]);
 
    for (int i=ans.len;i>=1;i--)
        printf("%d",ans.s[i]);
    printf("\n");
}
 
int main()
{
    freopen("vans.in","r",stdin);
    freopen("vans.out","w",stdout);
 
    fill();
    init();
    doit();
    ouit();
 
    return 0;
}