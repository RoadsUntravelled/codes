/*
ID:selfcon2
LANG:C++
PROG:fc
*/
#include <fstream>
#include <cstdlib>
#include <cstring>
#include <cmath>
using namespace std;
ifstream fin("fc.in");
ofstream fout("fc.out");
struct node{double x,y;};
node p0,p[10000],a[10000],b[10000];
static int n,pn,pb;
static double ans=0;
double cross(node o,node a,node b)
{
	return (a.x-o.x)*(b.y-o.y)-(b.x-o.x)*(a.y-o.y);	
}	
int cmp(const void * x,const void * y)
{
	node a=*(node *)x,b=*(node *)y;
	return cross(p0,a,b)<0;
}
double dis(node a,node b)
{
	return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));	
}	
int main()
{
	//-----------------------------------init
	fin>>n;p0.x=1000000000;p0.y=1000000000;
	for(int i=0;i<n;i++)
	{
		fin>>p[i].x>>p[i].y;
		if(p[i].x<p0.x){p0=p[i];pn=i;}
		else if(p[i].x==p0.x&&p[i].y<p0.y){p0=p[i];pn=i;}
	}
	//-----------------------------------极角排序
	int j=-1;
	for(int i=0;i<n;i++)
		if(i!=pn){j++;a[j]=p[i];}
	qsort(a,n-1,sizeof(a[0]),cmp);	
	//------------------------------------Graham Scan
	b[0]=p0;b[1]=a[0];pb=2;
	for(int i=1;i<n-1;i++)
	{
		b[pb]=a[i];
		while(cross(b[pb-2],b[pb-1],b[pb])<=0)
		{
			pb--;b[pb]=a[i];
		}
		pb++;
	}	
	//--------------------------------------Calculate
	for(int i=1;i<pb;i++)
		ans+=dis(b[i-1],b[i]);
	ans+=dis(b[0],b[pb-1]);
	fout.setf(ios::fixed);
	fout.precision(2);
	fout<<ans<<endl;
	return 0;
}/*
ID: cmykrgb1
PROG: fc
LANG: C++
*/
//Written By CmYkRgB123
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cmath>
#define MAXN 10001
#define INF 0x7FFFFFFF
using namespace std;
typedef struct
{
	double x,y;
} TPoint;
ifstream fi("fc.in");
FILE *fo;
int N,top;
TPoint P[MAXN],ST,Z,*stack[MAXN];
 
double FP(TPoint &l1s,TPoint &l1e,TPoint &l2s,TPoint &l2e)
{
	TPoint l1,l2;
	l1.x=l1e.x-l1s.x;l1.y=l1e.y-l1s.y;
	l2.x=l2e.x-l2s.x;l2.y=l2e.y-l2s.y;
	return l1.x*l2.y-l2.x*l1.y;
}
 
double dis(double x1,double y1,double x2,double y2)
{
	return sqrt( (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2) );
}
 
int cmp(const void *A,const void *B) //把除了ST点外的所有点，旋转角度排序
{
	TPoint *a=(TPoint *)A; TPoint *b=(TPoint *)B;
	double fp=FP(*a,ST,*b,ST);
	if( fp < 0) return 1;
	if( fp == 0 && dis(a->x,a->y,ST.x,ST.y) < dis(b->x,b->y,ST.x,ST.y)) // 如果在一条直线上，则把远的放在前面
		return 1;
	return -1;
}
 
void init()
{
	int i,st;
	double maxx=-INF;
	fi >> N;
	for (i=1;i<=N;i++)
	{
		fi >> P[i].x >> P[i].y;
		if (P[i].x>maxx)
		{
			maxx=P[i].x;
			ST=P[i];
			st=i;
		}
	}
	P[st]=P[N];	P[N--]=Z;
	qsort(P+1,N,sizeof(TPoint),cmp);
}
 
void graham()
{
	int i;
	double fp;
	stack[0]=&ST;
	stack[top=1]=&P[1];
	for (i=2;i<=N;i++)
	{
		stack[++top]=&P[i];
		fp=FP(*stack[top-1],*stack[top],*stack[top-1],*stack[top-2]);
		while (fp<0)
		{
			stack[top-1]=stack[top];
			top--;
			fp=FP(*stack[top-1],*stack[top],*stack[top-1],*stack[top-2]);
		}
	}
}
 
void print()
{
	int i;
	double ans=0;
	for (i=1;i<=top;i++)
		ans+=dis(stack[i-1]->x,stack[i-1]->y,stack[i]->x,stack[i]->y);
	ans+=dis(stack[top]->x,stack[top]->y,stack[0]->x,stack[0]->y);
	fi.close();
	fo=fopen("fc.out","w");
	fprintf(fo,"%.2lf\n",ans);
	fclose(fo);
}
 
int main()
{
	init();
	graham();
	print();
	return 0;
}/*
ID: masterr3
PROG: fc
LANG: C++
*/
 
#include <algorithm>
#include <cmath>
#include <cstdio>
#include <vector>
using namespace std;
 
const int N = 10000;
struct point
{
	double x, y;
	double dist(const point &rhs) const
	{
		return sqrt((x-rhs.x)*(x-rhs.x)+(y-rhs.y)*(y-rhs.y));
	}
	static double outer_product(const point &a, const point &b, const point &base)
	{
		return (a.x-base.x)*(b.y-base.y)-(a.y-base.y)*(b.x-base.x);
	}
	bool operator<(const point &rhs) const
	{
		return y < rhs.y || y == rhs.y && x < rhs.x;
	}
	bool operator()(const point &a, const point &b) const;
}p[N];
 
bool point::operator()(const point &a, const point &b) const
{
	double t = outer_product(a, b, p[0]);
	return fabs(t) < 1E-6 && fabs(a.x-p[0].x) < fabs(b.x-p[0].x) || t > 0.;
}
 
int main()
{
	int n;
	vector<point> hull;
	freopen("fc.in", "r", stdin);
	freopen("fc.out", "w", stdout);
	scanf("%d", &n);
	for (int i = 0; i < n; ++i)
		scanf("%lf%lf", &p[i].x, &p[i].y);
	iter_swap(p, min_element(p, p+n));
	sort(p+1, p+n, point());
	copy(p, p+3, back_inserter(hull));
	for (int i = 3; i < n; ++i)
	{
		while (hull.size() > 2 && point::outer_product(hull.back(), p[i], hull[hull.size()-2]) < 0)
			hull.pop_back();
		hull.push_back(p[i]);
	}
	double res = hull.back().dist(hull[0]);
	for (vector<point>::size_type i = 1; i != hull.size(); ++i)
		res += hull[i-1].dist(hull[i]);
	printf("%.2lf\n", res);
}/*
	ID: ymf11111
	TASK:fc
	LANG:C++
*/
#include <iostream>
#include <cstring>
#include <cmath>
#include <cstdio>
 
#define MAXN 10000
#define sqr(x) ((x) * (x))
 
using namespace std;
 
struct P2d {
	double px,py;
};
 
typedef P2d Vect2d;
 
double cross(Vect2d a,Vect2d b) {
	return (a.px * b.py - b.px * a.py);
}
 
Vect2d	P2Vect(P2d st,P2d ed) {
	ed.px -= st.px;
	ed.py -= st.py;
	return ed;
}
 
double dist(P2d a,P2d b) {
	return (sqrt(sqr(a.px - b.px) + sqr(a.py - b.py)));
}
 
int N,tail = 0;
double ans = 0;
P2d ps[MAXN],outlist[MAXN];
 
void qsort(int st,int ed) {
 
	int i = st,j = ed;
	double midx = ps[(i + j) >> 1].px,midy = ps[(i + j) >> 1].py;
	while (i < j)
	{
		while (ps[i].px < midx || (ps[i].px == midx && ps[i].py < midy)) i++;
		while (ps[j].px > midx || (ps[j].px == midx && ps[j].py > midy)) j--;
 
		if (i <= j)
		{
			P2d tmp = ps[i];
			ps[i] = ps[j];
			ps[j] = tmp;
			i++; j--;
		}
	}
 
	if (i < ed) qsort(i,ed);
	if (st < j) qsort(st,j);
}
 
int main() {
 
	freopen("fc.in","r",stdin);
	freopen("fc.out","w",stdout);
	//files
	scanf("%d",&N);
	for (int i = 1; i <= N; i++) scanf("%lf %lf",&ps[i].px,&ps[i].py);
	//read
	qsort(1,N);
	//sort
	int min = 2;
	for (int i = 1; i <= N; i++)
	{
		while (tail >= min && cross(P2Vect(outlist[tail - 1],ps[i]),P2Vect(outlist[tail - 1],outlist[tail])) < 0) tail--;
		outlist[++tail] = ps[i];	
	}
	min = tail + 1;
	for (int i = N - 1; i >= 1; i--)
	{
		while (tail >= min && cross(P2Vect(outlist[tail - 1],ps[i]),P2Vect(outlist[tail - 1],outlist[tail])) < 0) tail--;
		outlist[++tail] = ps[i];
	}
 
	for (int i = 1; i < tail; i++) ans += dist(outlist[i],outlist[i + 1]); 
	printf("%.2lf\n",ans);
	return 0;
}/*
ID:   talenth1
PROG: fc
LANG: C++
*/
#include<cstdio>
#include<iostream>
#include<cstdlib>
#include<cstring>
#include<cmath>
#define maxn 10010
#define eata 1e-7
//using namespace std;
struct Point{
	double x,y;
	};
int n,top;
Point p[maxn],stack[maxn];
double dcmp(double x1,double x2)
{
	if(fabs(x1-x2)<=eata)return 0;
	return(x1-x2);
}
int cmp(const void *x1,const void *x2)
{
	Point p1,p2;
	p1=*((Point *)x1);
	p2=*((Point *)x2);
	if(dcmp(p1.y,p2.y)){
		if(p1.y-p2.y>0)return 1;
		else if(p1.y-p2.y<0)return -1;
		else return 0;
		}
	else {
		if(p1.x-p2.x>0)return 1;
		else if(p1.x-p2.y<0)return -1;
		else return 0;
		}
}
double crossmul(Point p1,Point p2)
{
	return (p1.x*p2.y-p1.y*p2.x);
}
Point vectordec(Point p1,Point p2)
{
	Point pi;
	pi.x=p1.x-p2.x;
	pi.y=p1.y-p2.y;
	return pi;
}
double distance(Point p1,Point p2)
{
	return(sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y)));
}
void emptystack()
{
	top=0;
}
void push(Point x)
{
	top++;
	stack[top]=x;
}
void pop()
{
	top--;
}
void datain()
{
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
		scanf("%lf%lf",&p[i].x,&p[i].y);
}
void work()
{
	int i;
	double sum=0;
	Point tmp;
	qsort(&p[1],n,sizeof(Point),cmp);
	//left round
	emptystack();
	push(p[1]);
	i=2;
	while(i<=n){
		if(top==1||dcmp(crossmul(vectordec(stack[top],stack[top-1]),vectordec(p[i],stack[top])),0)>=0){
			sum+=distance(p[i],stack[top]);
			push(p[i]);
			i++;
			}
		else {
			sum-=distance(stack[top],stack[top-1]);
			pop();
			}
		}
	//right round
	emptystack();
	push(p[n]);
	i=n-1;
	while(i>=1){
		if(top==1||dcmp(crossmul(vectordec(stack[top],stack[top-1]),vectordec(p[i],stack[top])),0)>=0){
			sum+=distance(p[i],stack[top]);
			push(p[i]);
			i--;
			}
		else {
			sum-=distance(stack[top],stack[top-1]);
			pop();
			}
		}
	printf("%.2lf\n",sum);
}
int main()
{
    freopen("fc.in","r",stdin);
    freopen("fc.out","w",stdout);       
    datain();
    work();
    return 0;
}