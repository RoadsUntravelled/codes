代码非常简洁的SAP算法
/*
ID:ybojan2
LANG:C++
TASK:ditch
*/
#include <iostream>
#include <fstream>
using namespace std;
int c[201][201],h[201],vh[201],flow=0,n,m,delta;
bool found;
void aug(int v)
{
     if (v==n){
               flow+=delta;
               found=true;
               return;
               }
     int temp=delta,i,minh=n-1;
     for (i=1;i<=n;i++)
         if (c[v][i]>0){
                        if (h[i]+1==h[v]){
                                          delta=min(delta,c[v][i]);
                                          aug(i);
                                          if (h[1]>=n) return;
                                          if (found) break;
                                          delta=temp;
                                          }
                        minh=min(minh,h[i]);
                        }
     if (found){
                c[v][i]-=delta;
                c[i][v]+=delta;
                }
     else{
          vh[h[v]]--;
          if (vh[h[v]]==0) h[1]=n;
          h[v]=minh+1;
          vh[h[v]]++;
          }
}
int main()
{
    memset(c,0,sizeof(c));
    memset(h,0,sizeof(h));
    memset(vh,0,sizeof(vh));
    flow=0;
    ifstream fin("ditch.in");
    ofstream fout("ditch.out");
    fin>>m>>n;
    for (int i=1;i<=m;i++)
    {
        int x,y,z;
        fin>>x>>y>>z;
        c[x][y]+=z;
    }
    vh[0]=n;
    while (h[1]<n)
    {
          delta=2147483647;
          found=false;
          aug(1);
    }
    fout<<flow<<endl;
    return 0;
}
Edmonds-Karp 算法
/*
ID: cmykrgb1
PROG: ditch
LANG: C++
*/
// By CmYkRgB123
#include <iostream>
#include <fstream>
#define MAX 201
using namespace std;
 
class Tadjl
{
public:
	class Tnode
	{
	public:
		int r,v;
		void set(int tr,int tv)
		{
			r=tr;
			v=tv;
		}
	};
	int cnt;
	Tnode link[MAX];
};
 
class tQueue
{
public:
	class linklist
	{
	public:
		linklist* next;
		int value;
		linklist()
		{
			next=0;
			value=0;
		}
	};
	linklist *first,*last;
	int size;
	void add(int p)
	{
		if (size==0)
			first=last=new linklist;
		else
			last=last->next=new linklist;
		last->value=p;
		size++;
	}
	int del()
	{
		int rtn=first->value;
		linklist *tfirst=first;
		first=first->next;
		delete tfirst;
		size--;
		return rtn;
	}
	void reset()
	{
		size=0;
		first=last=0;
	}
	tQueue()
	{
		reset();
	}
};
 
ifstream fi("ditch.in");
ofstream fo("ditch.out");
 
Tadjl adjl[MAX];
int N,M,ans;
 
inline int min(int a,int b)
{
	return a<b?a:b;
}
 
void init()
{
	int i,a,b,v;
	fi >> N >> M;
	for (i=1;i<=N;i++)
	{
		fi >> a >> b >> v;
		adjl[a].link[ ++adjl[a].cnt].set(b,v);
	}
}
 
 
int edmonds(int start,int end)
{
	int i,j,k;
	int father[MAX],fp[MAX],max[MAX];
	int Maxflow=0;
	memset(father,0,sizeof(father));
	max[start]=0x7FFFFFFF;
	tQueue *Q=new tQueue;
	Q->add(start);
	while (Q->size)
	{
		i=Q->del();
		for (k=1;k<=adjl[i].cnt;k++)
		{
			j=adjl[i].link[k].r;
			if (!adjl[i].link[k].v || j==start) continue;
			if (!father[j])
			{
				father[j]=i;
				fp[j]=k;
				max[j]=min(adjl[i].link[k].v,max[i]);
				if (j==end)
				{
					Maxflow+=max[j];
					while (father[j])
					{
						adjl[father[j]].link[fp[j]].v-=max[end];
						adjl[j].link[++adjl[j].cnt].set(father[j],max[j]);
						j=father[j];
					}
					memset(father,0,sizeof(father));
					Q->reset();
					Q->add(start);
					break;
				}
				Q->add(j);
			}
		}
	}
	return Maxflow;
}
 
void print()
{
	fo << ans << endl;
	fi.close();
	fo.close();
}
 
int main()
{
	init();
	ans=edmonds(1,M);
	print();
	return 0;
}
#include <stdio.h>
#define MAX 20000000
 
long n,m;
long map[201][201];
long nam[201];
long num[201];
long las[201];
long ans;
 
long stack[201];
long s,e=1;
 
void bfs(){
	long i;
	for(i=0;i<=m;i++)nam[i]=MAX;
	stack[0]=m;
	nam[m]=0;
	num[0]=1;
	while(s!=e){
		for(i=1;i<=m;i++)
			if(map[i][stack[s]]!=0 && nam[i]==MAX){
				nam[i]=nam[stack[s]]+1;
				num[nam[i]]++;
				stack[e]=i;
				e++;
			}
		s++;
	}
}
 
void pre(){
	long i,j,k,l;
	scanf("%ld%ld",&n,&m);
	for(i=0;i<n;i++){
		scanf("%ld%ld%ld",&j,&k,&l);
		map[j][k]+=l;
	}
	bfs();
}
 
void add(){
	long i=m,j=MAX;
	while(i!=1){
		if(j>map[las[i]][i])
			j=map[las[i]][i];
		i=las[i];
	}
	i=m;
	while(i!=1){
		map[las[i]][i]-=j;
		map[i][las[i]]+=j;
		i=las[i];
	}
	ans+=j;
}
 
void sap(){
	long i=1,j,k;
	while(nam[1]<m){
		k=0;
		if(i==m){
			add();
			i=1;continue;
		}
		for(j=1;j<=m;j++)
			if(nam[j]==nam[i]-1 && map[i][j]!=0){
				las[j]=i;
				i=j;
				break;
			}else if(map[i][j]!=0 &&nam[k]>nam[j])k=j;
		if(j==m+1){
			num[nam[i]]--;
			if(num[nam[i]]==0)break;
			nam[i]=nam[k]+1;
			if(nam[i]<MAX)num[nam[i]]++;
			if(i!=1)i=las[i];
		}
	}
}
 
main(){
	freopen("ditch.in","r",stdin);
	freopen("ditch.out","w",stdout);
	pre();
	sap();
	printf("%ld\n",ans);
	return 0;
}