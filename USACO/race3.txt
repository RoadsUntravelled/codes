/*
ID: cmykrgb1
PROG: race3
LANG: C++
*/
//written by CmYkRgB123
#include <iostream>
#include <fstream>
#define MAX 101
using namespace std;
ifstream fi("race3.in");
ofstream fo("race3.out");
 
int adjl[MAX][MAX];
int ans[MAX][2];
bool used[MAX],tused[MAX];
int N,start,end;
 
void init()
{
	int a=0,i=0;
	while (a!=-1)
	{
		fi >> a;
		while (a>=0)
		{
			adjl[i][ ++adjl[i][0] ]=a;
			used[a]=true;
			fi >> a;
		}
		i++;
	}
	N=i-2;
	for (i=0;i<=N;i++)
	{
		if (adjl[i][0]==0)
			end=i;
		if (!used[i])
			start=i;
	}
}
 
void dfs3(int i)
{
	int k,j;
	for (k=1;k<=adjl[i][0];k++)
	{
		j=adjl[i][k];
		if (!tused[j])
		{
			tused[j]=true;
			dfs3(j);
		}
	}
}
 
void dfs2(int i)
{
	int k,j;
	for (k=1;k<=adjl[i][0];k++)
	{
		j=adjl[i][k];
		if (!used[j])
		{
			used[j]=true;
			dfs2(j);
		}
	}
}
 
void question2()
{
	int i,j,k;
	for (i=1;i<=N-1;i++)
	{
		memset(used,0,sizeof(used));
		memset(tused,0,sizeof(tused));
		dfs2(i);
		tused[i]=true;
		tused[0]=true;
		dfs3(0);
		k=1;
		for (j=0;j<=N;j++)
			if (j!=i && used[j] && tused[j])
			{
				k=0;
				break;
			}
		if (k)
			ans[ ++ans[0][1] ][1]=i;
	}
}
 
void dfs1(int i)
{
	int k,j;
	for (k=1;k<=adjl[i][0];k++)
	{
		j=adjl[i][k];
		if (!used[j])
		{
			used[j]=true;
			dfs1(j);
		}
	}
}
 
void question1()
{
	int i;
	for (i=1;i<=N-1;i++)
	{
		memset(used,0,sizeof(used));
		used[i]=true;
		dfs1(0);
		if (!used[N])
			ans[ ++ans[0][0] ][0]=i;
	}
}
 
void print()
{
	int i;
	fo << ans[0][0];
	for (i=1;i<=ans[0][0];i++)
		fo <<' ' << ans[i][0];
	fo << endl;
	fo << ans[0][1];
	for (i=1;i<=ans[0][1];i++)
		fo <<' ' << ans[i][1];
	fo << endl;
	fi.close();
	fo.close();
}
 
int main()
{
	init();
	question1();
	question2();
	print();
	return 0;
}// 只用一次DFS
/*
PROG: race3
LANG: C++
*/
 
#include <stdio.h>
#include <string.h>
 
int a[51], b[51], c = 0, d = 0;
int n = -1;
 
bool f[51][51], g[51][51];
bool v[51];
int i = 0, j, k;
 
void search(const int vtx) {
	v[vtx] = true;
	for (int i = 0; i <= n; ++i)
		if (i != k && f[vtx][i] && !v[i]) search(i);
}
 
int main() {
	freopen("race3.in", "rt", stdin);
	freopen("race3.out", "wt", stdout);
	memset(f, 0, sizeof f);
	while (i != -1)
		for (++n; ; ) {
			scanf("%d", &i);
			if (i < 0) break;
			f[n][i] = true;
		}
 
	--n;
	memcpy(g, f, sizeof g);
	for (k = 0; k <= n; ++k)
		for (i = 0; i <= n; ++i)
			for (j = 0; j <= n; ++j)
				if (g[i][k] && g[k][j]) g[i][j] = true;
 
	for (k = 1; k < n; ++k) {
		memset(v, 0, sizeof v);
		search(0);
		if (!v[n]) {
			a[c++] = k;
			for (j = 1, i = 0; i < n; ++i)
				if (v[i] && g[k][i]) {
					j = 0;
					break;
				}
			if (j) b[d++] = k;
		}
	}
 
	printf("%d", c);
	for (i = 0; i < c; ++i) printf(" %d", a[i]);
	printf("\n%d", d);
	for (i = 0; i < d; ++i) printf(" %d", b[i]);
	printf("\n");
	return 0;
}/*
	ID:echooat1
	LANG:C++
	TASK:race3
	*/
#include <fstream>
#include <cstring>
using namespace std;
ifstream fin("race3.in");ofstream fout("race3.out");
long a[51][51]={0};bool c[51][51]={0};
long ans[51]={0},ans1[51]={0};
bool hash[51]={0};
long u=-1,temp=0;
bool bfs(void){
	long d[100]={0},head=1,tail=1;
	bool h[51]={1,0};
	while(head<=tail){
		long now=d[head++];
		for(long i=1;i<=a[now][0];i++)
			if(!h[a[now][i]]&&!hash[a[now][i]])
				h[d[++tail]=a[now][i]]=true;
		}
	return !h[temp];
}
bool bfs2(void){
	long d[100]={0},tail=1,head=1;
	long level[100]={0};
	level[0]=1;long k=0;
	while(head<=tail){
		long now=d[head++];
		if(hash[now]){k=now;continue;}
		for(long i=1;i<=a[now][0];i++)
			if(!level[a[now][i]])
				level[d[++tail]=a[now][i]]=1;
	}
	level[k]=2;
	memset(d,0,sizeof d);head=1;tail=1;d[1]=k;
	while(head<=tail){
		long now=d[head++];
		for(long i=1;i<=a[now][0];i++){
			if(level[a[now][i]]==1)return false;
			if(!level[a[now][i]])
				level[d[++tail]=a[now][i]]=2;
		}
	}
	return true;
}
int main(int argc,char** argv){
	fin >>u;
	while(u!=-1){
		while(u!=-2){
			a[temp][++a[temp][0]]=u;
			c[temp][u]=true;
			fin >>u;
		}
		fin >>u;
		temp++;
	}
	temp--;
	for(long i=1;i<temp;i++){
		hash[i]=true;
		if(bfs())ans[++ans[0]]=i;
		if(bfs2())ans1[++ans1[0]]=i;
		hash[i]=false;
	}
	for(long i=0;i<ans[0];i++)fout <<ans[i]<<' ';fout <<ans[ans[0]]<<endl;
	for(long i=0;i<ans1[0];i++)fout <<ans1[i]<<' ';fout <<ans1[ans1[0]]<<endl;
	return 0;
}