/*
终于AC了...一直不知道第二问错在哪里...
原来没有换行...
记忆化搜索版 比较好写
USER: Long Guo [jscompa1]
TASK: twofive
LANG: C++
 
Compiling...
Compile: OK
 
Executing...
   Test 1: TEST OK [0.032 secs, 2832 KB]
   Test 2: TEST OK [0.000 secs, 2832 KB]
   Test 3: TEST OK [0.011 secs, 2832 KB]
   Test 4: TEST OK [0.011 secs, 2832 KB]
   Test 5: TEST OK [0.000 secs, 2832 KB]
   Test 6: TEST OK [0.011 secs, 2832 KB]
   Test 7: TEST OK [0.011 secs, 2832 KB]
   Test 8: TEST OK [0.000 secs, 2832 KB]
   Test 9: TEST OK [0.011 secs, 2832 KB]
   Test 10: TEST OK [0.000 secs, 2832 KB]
   Test 11: TEST OK [0.000 secs, 2832 KB]
   Test 12: TEST OK [0.011 secs, 2832 KB]
 
All tests OK.
Your program ('twofive') produced all correct answers!  This is your
submission #6 for this problem.  Congratulations!
 
 
*/
#include<stdio.h>
#define maxstate 7776
const char alphabet[]="ABCDEFGHIJKLMNOPQRSTUVWXY";
using namespace std;
int dp[maxstate],row[6],xpos[30],ypos[30];
char task,s[30],ans[30];
inline void init_arrays()
{
     for (int i=1;i<7;i++) row[i]=0;
     for (int i=0;i<maxstate;i++) dp[i]=-1; 
     row[0]=5;
     dp[maxstate-1]=1;  
}
 
inline int dfs(int ch)
{
    int nowstate=0;
    for (int i=1;i<6;i++) nowstate=nowstate*6+row[i];
    if (dp[nowstate]<0)
    {
                        dp[nowstate]=0;
                        if (!xpos[ch])
                        {
                                      for (int i=1;i<6;i++)
                                        if (row[i]<row[i-1])
                                        {
                                                            ++row[i];
                                                            dp[nowstate]+=dfs(ch+1);
                                                            --row[i];
                                        }
                        }
                        else
                        {
                            if (row[xpos[ch]]<row[xpos[ch]-1]&&row[xpos[ch]]+1==ypos[ch])
                            {
                                                                                         ++row[xpos[ch]];
                                                                                         dp[nowstate]+=dfs(ch+1);
                                                                                         --row[xpos[ch]];
                            }                            
                        }
    }
    return dp[nowstate];
}
 
inline int DP()
{
    init_arrays();
    return dfs(0);
}
 
inline void num2word()
{
     for (int i=0;i<25;i++) 
     {
         xpos[i]=0;ypos[i]=0;
     }
     int n;
     scanf("%d",&n);
     for (int i=1;i<6;i++)
       for (int j=1;j<6;j++)
         for (int ch=0;ch<25;ch++) 
           if (!xpos[ch])
           {
                           xpos[ch]=i;ypos[ch]=j;
                           int temp=DP();
                           if (n>temp) n-=temp;
                           else break;
                           xpos[ch]=0;ypos[ch]=0;
           }
     for (int i=0;i<25;i++)
       ans[(xpos[i]-1)*5+ypos[i]-1]=alphabet[i];
     printf("%s\n",&ans);
}
 
inline int word2num()
{
    int ANSWER=1;
    char tmp;
    scanf("%c",&tmp);
    for (int i=1;i<6;i++)
      for (int j=1;j<6;j++)
      {
          scanf("%c",&tmp);
          int nowch=tmp-65;
          for (int ch=0;ch<nowch;ch++)
            if (!xpos[ch])
            {
                          xpos[ch]=i;ypos[ch]=j;
                          ANSWER+=DP();
                          xpos[ch]=0;ypos[ch]=0;
            }
          xpos[nowch]=i;ypos[nowch]=j;
      }
    return ANSWER;
}
 
int main()
{
    freopen("twofive.in","r",stdin);
    freopen("twofive.out","w",stdout);
    scanf("%c",&task);
    if (task=='N') num2word();
    else printf("%d\n",word2num());
    return 0;
}
/*
递推版
常数时间稍少,比较长,还要预处理
USER: Long Guo [jscompa1]
TASK: twofive
LANG: C++
 
Compiling...
Compile: OK
 
Executing...
   Test 1: TEST OK [0.000 secs, 2864 KB]
   Test 2: TEST OK [0.000 secs, 2864 KB]
   Test 3: TEST OK [0.011 secs, 2864 KB]
   Test 4: TEST OK [0.011 secs, 2864 KB]
   Test 5: TEST OK [0.011 secs, 2864 KB]
   Test 6: TEST OK [0.011 secs, 2864 KB]
   Test 7: TEST OK [0.011 secs, 2864 KB]
   Test 8: TEST OK [0.011 secs, 2864 KB]
   Test 9: TEST OK [0.000 secs, 2864 KB]
   Test 10: TEST OK [0.000 secs, 2864 KB]
   Test 11: TEST OK [0.000 secs, 2864 KB]
   Test 12: TEST OK [0.000 secs, 2864 KB]
 
All tests OK.
Your program ('twofive') produced all correct answers!  This is your
submission #12 for this problem.  Congratulations!
 
 
*/
#include<stdio.h>
const char alphabet[]="ABCDEFGHIJKLMNOPQRSTUVWXY";
using namespace std;
int f[6][6][6][6][6],row[6],xpos[30],ypos[30];
int state[26][50][6];
char task,s[30],ans[30];
int snum[26];
int a,b,c,d,e,ANSWER=1;
inline int DP()
{
       f[5][5][5][5][5]=1;
       for (int sum=24;sum>=0;sum--)
         for (int nows=1;nows<=snum[sum];nows++)
         {
             row[1]=state[sum][nows][1];
             row[2]=state[sum][nows][2];
             row[3]=state[sum][nows][3];
             row[4]=state[sum][nows][4];
             row[5]=state[sum][nows][5];
             row[0]=5;
             a=row[1];b=row[2];c=row[3];d=row[4];e=row[5];
             f[a][b][c][d][e]=0;
             if (!xpos[sum])
             {
                            if (a<5) f[a][b][c][d][e]+=f[a+1][b][c][d][e];
                            if (b<a) f[a][b][c][d][e]+=f[a][b+1][c][d][e];
                            if (c<b) f[a][b][c][d][e]+=f[a][b][c+1][d][e];
                            if (d<c) f[a][b][c][d][e]+=f[a][b][c][d+1][e];
                            if (e<d) f[a][b][c][d][e]+=f[a][b][c][d][e+1];
             }
             else
             {
                 if (row[xpos[sum]]<row[xpos[sum]-1]&&row[xpos[sum]]+1==ypos[sum])
                 {
                      ++row[xpos[sum]];
                      f[a][b][c][d][e]+=f[row[1]][row[2]][row[3]][row[4]][row[5]];
                 }
             }
         }
       return f[0][0][0][0][0];
}
 
inline void init()
{
         for (int i1=0;i1<6;i1++)
           for (int i2=0;i2<=i1;i2++)
             for (int i3=0;i3<=i2;i3++)
               for (int i4=0;i4<=i3;i4++)
                 for (int i5=0;i5<=i4;i5++)
                 {
                     int sum=i1+i2+i3+i4+i5;
                     ++snum[sum];
                     state[sum][snum[sum]][1]=i1;
                     state[sum][snum[sum]][2]=i2;
                     state[sum][snum[sum]][3]=i3;
                     state[sum][snum[sum]][4]=i4;
                     state[sum][snum[sum]][5]=i5;
                 }     
}
 
void num2word()
{
     for (int i=0;i<25;i++) 
     {
         xpos[i]=0;ypos[i]=0;
     }
     int n;
     scanf("%d",&n);
     for (int i=1;i<6;i++)
       for (int j=1;j<6;j++)
         for (int ch=0;ch<25;ch++) 
           if (!xpos[ch])
           {
                           xpos[ch]=i;ypos[ch]=j;
                           int temp=DP();
                           if (n>temp) n-=temp;
                           else break;
                           xpos[ch]=0;ypos[ch]=0;
           }
     for (int i=0;i<25;i++)
       ans[(xpos[i]-1)*5+ypos[i]-1]=alphabet[i];
     printf("%s\n",&ans);
}
 
int word2num()
{
    char tmp;
    scanf("%c",&tmp);
    for (int i=1;i<6;i++)
      for (int j=1;j<6;j++)
      {
          scanf("%c",&tmp);
          int nowch=tmp-65;
          for (int ch=0;ch<nowch;ch++)
            if (!xpos[ch])
            {
                          xpos[ch]=i;ypos[ch]=j;
                          ANSWER+=DP();
                          xpos[ch]=0;ypos[ch]=0;
            }
          xpos[nowch]=i;ypos[nowch]=j;
      }
      return ANSWER;
}
 
int main()
{
    freopen("twofive.in","r",stdin);
    freopen("twofive.out","w",stdout);
    init();
    scanf("%c",&task);
    if (task=='N') num2word();
    else printf("%d\n",word2num());
    return 0;
}
 
My USACO solution:hi.baidu.com/pwecar#include <iostream>
//#include <fstream>
#include <string>
#include <algorithm>
using namespace std;
 
const int SIZE = 26;
const double EPS = 1e-6;
int MAX = 99999999;
 
//ifstream cin("twofive.in");ofstream cout("twofive.out");
int nways[6][6][6][6][6];
int maxr[5];
int maxc[5];
bool used[26];
int calc(int a, int b, int c, int d, int e,int l)
{
    int cur = 0;
    if( nways[a][b][c][d][e] )
        return nways[a][b][c][d][e];
 
    if( used[l] )
        return nways[a][b][c][d][e] = calc(a,b,c,d,e,l+1);
 
    if( a < 5 && l > maxr[0] && l > maxc[a] ) cur += calc(a+1,b,c,d,e,l+1);
    if( a > b && l > maxr[1] && l > maxc[b] ) cur += calc(a,b+1,c,d,e,l+1);
    if( b > c && l > maxr[2] && l > maxc[c] ) cur += calc(a,b,c+1,d,e,l+1);
    if( c > d && l > maxr[3] && l > maxc[d] ) cur += calc(a,b,c,d+1,e,l+1);
    if( d > e && l > maxr[4] && l > maxc[e] ) cur += calc(a,b,c,d,e+1,l+1);
 
    return nways[a][b][c][d][e] = cur;
}
int cal(int a[],int n)
{
    memset(nways,0,sizeof(nways));
    memset(maxr,-1,sizeof(maxr));
    memset(maxc,-1,sizeof(maxc));
    memset(used,0,sizeof(used));
    nways[5][5][5][5][5] = 1;
    int in[5] = {0};
    for(int i = 0;i < n;i++)
    {
        int r = i / 5;
        int c = i % 5;
        in[r]++;
        if(a[i] < maxr[r] || a[i] < maxc[c])
            return 0;
        maxr[r] = a[i];
        maxc[c] = a[i];
        used[a[i]] = 1;
    }
    int ans = calc(in[0],in[1],in[2],in[3],in[4],0);
    return ans;
}
int stoa(char s[])
{
    int a[SIZE];
    int ans = 0;
    a[0] = 0;
    bool used[26] = {0};
    used[0] = 1;
    for(int i = 1;i < 25;i++)
    {
        int j;
        for(j = 0;j < s[i] - 'A';j++)
            if(!used[j])
            {
                a[i] = j;
                int temp = cal(a,i+1);
                ans += temp;
            }
        used[j] = 1;
        a[i] = j;
    }
    return ans + 1;
}
void atos(int num,char s[])
{
    int a[SIZE];
    a[0] = 0;
    bool used[26] = {0};
    used[0] = 1;
    s[0] = 'A';
    int now = 0;
    for(int i = 1;i < 25;i++)
    {
        int j;
        for(j = 0;j < 25;j++)
            if(!used[j])
            {
                s[i] = j + 'A';
                a[i] = j;
                int temp = cal(a,i+1);
                if(now + temp >= num)
                    break;
                now += temp;
            }
        used[j] = 1;
    }
    s[25] = '\0';
}
 
int main()
{
    string way;
    char s[27];
    int n;
 
    while(cin >> way)
    {
        if(way == "W")
        {
            cin >> s;
            int n = stoa(s);
            cout << n << endl;
        }
        else
        {
            cin >> n;
            atos(n,s);
            cout << s << endl;
        }
    }
    return 0;
}Compiling...
Compile: OK
 
Executing...
   Test 1: TEST OK [0.000 secs, 3044 KB]
   Test 2: TEST OK [0.022 secs, 3044 KB]
   Test 3: TEST OK [0.011 secs, 3044 KB]
   Test 4: TEST OK [0.000 secs, 3044 KB]
   Test 5: TEST OK [0.000 secs, 3044 KB]
   Test 6: TEST OK [0.011 secs, 3044 KB]
   Test 7: TEST OK [0.000 secs, 3044 KB]
   Test 8: TEST OK [0.022 secs, 3044 KB]
   Test 9: TEST OK [0.011 secs, 3044 KB]
   Test 10: TEST OK [0.022 secs, 3044 KB]
   Test 11: TEST OK [0.000 secs, 3044 KB]
   Test 12: TEST OK [0.000 secs, 3044 KB]
 
All tests OK.
 
/*
            ID:echooat
            LANG:C++
            TASK:twofive
            */
#include <fstream>
#include <cstring>
#define C 6
using namespace std;
 
ifstream fin("twofive.in");
ofstream fout("twofive.out");
 
long f[C][C][C][C][C]={0};
bool us[C*C]={0};
long mx[C]={0},my[C]={0};
 
long count(long a,long b,long c,long d,long e,long ch){
            long& now=f[a][b][c][d][e];
            if(now)return now;
            if(us[ch])return now=count(a,b,c,d,e,ch+1);
 
            if(5>a&&ch>mx[0]&&ch>my[a])now+=count(a+1,b,c,d,e,ch+1);
            if(a>b&&ch>mx[1]&&ch>my[b])now+=count(a,b+1,c,d,e,ch+1);
            if(b>c&&ch>mx[2]&&ch>my[c])now+=count(a,b,c+1,d,e,ch+1);
            if(c>d&&ch>mx[3]&&ch>my[d])now+=count(a,b,c,d+1,e,ch+1);
            if(d>e&&ch>mx[4]&&ch>my[e])now+=count(a,b,c,d,e+1,ch+1);
 
            return now;
}
void go_w(void){
            string st;
            fin.get();
            getline(fin,st);
 
            long sum=0;
            long ii[C]={0};
 
            for(long i=0;i<25;i++){
	          ii[i/5]++;
	          long j;
	          for(j=0;j<st[i]-'A';j++)
		        if(!us[j]&&j>mx[i/5]&&j>my[i%5]){
			      mx[i/5]=my[i%5]=j;
			      memset(f,0,sizeof f);
			      f[5][5][5][5][5]=1;
			      us[j]=true;
			      sum+=count(ii[0],ii[1],ii[2],ii[3],ii[4],0);
			      us[j]=0;
		        }
	          us[j]=true;
	          mx[i/5]=my[i%5]=j;
            }
            fout <<sum+1<<endl;
}
void go_n(void){
            long sum=0;
            fin >>sum;
            memset(mx,-1,sizeof mx);
            memset(my,-1,sizeof my);
            memset(us,0,sizeof us);
 
            long ii[C]={0};
            string st;
 
            for(long i=0;i<25;++i){
	          ii[i/5]++;
	          long j;
	          for(j=0;j<25;++j)
		        if(!us[j]&&j>mx[i/5]&&j>my[i%5]){
			      us[j]=true;
			      mx[i/5]=my[i%5]=j;
			      memset(f,0,sizeof f);
			      f[5][5][5][5][5]=1;
			      long temp=count(ii[0],ii[1],ii[2],ii[3],ii[4],0);
			      if(sum-temp<=0)break;
				    else 
					  sum-=temp;
			      us[j]=false;
			      }
	          st=st+char(j+'A');
            }
            fout <<st<<endl;
}
int main(int argc,char** argv){
            char ch;
            fin >>ch;
            if(ch=='W')
	          go_w();
            else
	          go_n();
            return 0;
}Compile: OK
 
Executing...
   Test 1: TEST OK [0.000 secs, 2916 KB]
   Test 2: TEST OK [0.000 secs, 2916 KB]
   Test 3: TEST OK [0.011 secs, 2916 KB]
   Test 4: TEST OK [0.000 secs, 2916 KB]
   Test 5: TEST OK [0.011 secs, 2916 KB]
   Test 6: TEST OK [0.000 secs, 2916 KB]
   Test 7: TEST OK [0.011 secs, 2916 KB]
   Test 8: TEST OK [0.000 secs, 2916 KB]
   Test 9: TEST OK [0.000 secs, 2916 KB]
   Test 10: TEST OK [0.000 secs, 2916 KB]
   Test 11: TEST OK [0.000 secs, 2916 KB]
   Test 12: TEST OK [0.011 secs, 2916 KB]
 
All tests OK.
记忆化搜索。。。
/*
ID: zsyzgu1
PROG: twofive
LANG: C++
*/
#include<iostream>
#include<stdio.h>
#include<string.h>
 
using namespace std;
 
int m; char s[30];
 
int a[5];
int l[26];
long int f[6][6][6][6][6];
 
long int dp(int p)
{
    if (f[a[0]+1][a[1]+1][a[2]+1][a[3]+1][a[4]+1]>=0) return
        f[a[0]+1][a[1]+1][a[2]+1][a[3]+1][a[4]+1];
 
    long int ans=0;    
    if (p==25) ans=1; else
    if (l[p]>=0)
    {
        int x=l[p]%5;
        int y=l[p]/5;
        if (a[y]!=x-1) ans=0; else
        {
           ++a[y];
           ans+=dp(p+1);
           --a[y];
        }
    } else
    {
        for (int y=0;y<5;y++)
        {
            int x=a[y]+1;
            if ((y==0 && x<=4) || (y>0 && x<=a[y-1]))
            {
                ++a[y];
                ans+=dp(p+1);
                --a[y];
            }
        }
    }
 
    f[a[0]+1][a[1]+1][a[2]+1][a[3]+1][a[4]+1]=ans;
    return ans;
}
 
long int find()
{
    memset(a,-1,sizeof(a));
    memset(f,-1,sizeof(f));
    memset(l,-1,sizeof(l));
 
    for (int i=0;i<=m;i++)
    {
        if (l[s[i]-'A']!=-1) return 0;       
        if (i/5!=0 && s[i-5]>s[i]) return 0;  
        if (i%5!=0 && s[i-1]>s[i]) return 0;
        l[s[i]-'A']=i;
    }
 
    return dp(0);
}
 
int doit_N()
{
    int n; cin>>n; --n;
 
    for (m=0;m<25;m++) 
    {
        s[m]='A';
        long int p;
        while (p=find(),p<=n) 
        {
            n-=p;
            ++s[m];
        }
    }
 
    for (int i=0;i<25;i++)
        printf("%c",s[i]);
    printf("\n");
}
 
int doit_W()
{
    long int ans=0;
 
    char t[30]; scanf("%s",t);
 
    for (m=0;m<25;m++)
    {
        s[m]='A';
        while (s[m]<t[m])
        {
            ans+=find();
            ++s[m];
        }
    }
 
    ++ans; cout<<ans<<endl;
}   
 
int main()
{
    freopen("twofive.in","r",stdin);
    freopen("twofive.out","w",stdout);
 
    char how; scanf("%c\n",&how);
 
    if (how=='N') doit_N();
    if (how=='W') doit_W();
}