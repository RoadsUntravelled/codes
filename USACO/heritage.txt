简单易懂的程序
/*
ID:ybojan2
LANG:C++
TASK:heritage
*/
 
#include <iostream>
#include <fstream>
 
using namespace std;
 
    char str[30],a[27],b[27];
    ifstream fin("heritage.in");
    ofstream fout("heritage.out");
 
void go(int s1,int s2,int len)
{
     if (len<=0) return;
     if (len==1){
                 fout<<a[s1];
                 return ;
                 }
     int i;
     for (i=s1;i<=s1+len-1;i++)
         if (b[s2]==a[i]) break;
     go(s1,s2+1,i-s1);
     go(i+1,s2+i-s1+1,s1+len-1-i);
     fout<<b[s2];
}
 
int main()
{
    fin>>str;
    int l=strlen(str);
    l=strlen(str);
    for (int i=0;i<l;i++)
        a[i+1]=str[i];
    fin>>str;
    for (int i=0;i<l;i++)
        b[i+1]=str[i];
    go(1,1,l);
    fout<<endl;
    return 0;
}
USER: CmYkRgB CmYkRgB [cmykrgb1]
TASK: heritage
LANG: C++
Compiling...
Compile: OK
Executing...
  Test 1: TEST OK [0.011 secs, 2840 KB]
  Test 2: TEST OK [0.000 secs, 2840 KB]
  Test 3: TEST OK [0.000 secs, 2840 KB]
  Test 4: TEST OK [0.000 secs, 2840 KB]
  Test 5: TEST OK [0.000 secs, 2844 KB]
  Test 6: TEST OK [0.000 secs, 2840 KB]
  Test 7: TEST OK [0.000 secs, 2844 KB]
  Test 8: TEST OK [0.011 secs, 2844 KB]
  Test 9: TEST OK [0.000 secs, 2840 KB]
All tests OK.
YOUR PROGRAM ('heritage') WORKED FIRST TIME! That's fantastic -- and a rare thing. Please accept these special automated congratulations. 
--CmYkRgB123 16:27 2008年4月19日 (CST)
/*
ID: cmykrgb1
PROG: heritage
LANG: C++
*/
#include <iostream>
#include <fstream>
using namespace std;
class Node
{
public:
	Node()
	{
		left=right=0;
		letter=0;
		position=0;
	}
	Node *left,*right;
	char letter;
	long position;
};
ifstream fi("heritage.in");
ofstream fo("heritage.out");
Node *root;
char fs[26],ms[26];
long cnt=0,cur=1;
 
void scan(Node *N)
{
	if (N->left) scan(N->left);
	if (N->right) scan(N->right);
	fo << N->letter;
}
 
void init()
{
	char c;
	int i;
	while (c!=10 && c!=13)
		ms[cnt++]=c=fi.get();
	cnt--;
	while (c==10 && c==13) c=fi.get();
	for (i=0;i<cnt;i++)
		fs[i]=fi.get();
	root=new Node;
	root->letter=fs[0];
	for (i=0;i<cnt;i++)
		if (ms[i]==fs[0])
		{
			root->position=i;
			break;
		}
}
 
char getnextelement()
{
	if (cur>=cnt)
		return -1;
	else
		return fs[cur++];
}
 
void create(long L,long R,Node *C)
{
	char E;
	int i;
	bool found;
	while (1)
	{
		found=false;
		E=getnextelement();
		if (E==-1)
			return;
		else
		{
			for (i=L;i<=C->position-1;i++)
				if (ms[i]==E)
				{
					C->left=new Node;
					C->left->letter=E;
					C->left->position=i;
					create(L,C->position-1,C->left);
					found=true;
					break;
				}
			if (!found)
				for (i=C->position+1;i<=R;i++)
					if (ms[i]==E)
					{
						C->right=new Node;
						C->right->letter=E;
						C->right->position=i;
						create(C->position+1,R,C->right);
						found=true;
						break;
					}
			if (!found)
			{
				cur--;
				return;
			}
		}
	}
}
 
void print()
{
	scan(root);
	fo << endl;
	fi.close();
	fo.close();
}
 
int main()
{
	init();
	create(0,cnt-1,root);
	print();
	return 0;
}--CmYkRgB123 16:28 2008年4月19日 (CST)
另一个程序——完全字符串模拟：
/*
*Written By Satily
*/
 
#include<iostream> 
#include<fstream>
#include<string> 
using namespace std;
 
ifstream fin("heritage.in");
ofstream fout("heritage.out"); 
 
string pre,ino,pos; 
 
void solve (int l1,int r1,int l2,int r2)
{
    int i; 
 
    if (l1==r1)
    {
        pos+=ino[l1];
        return; 
    } 
    for (i=l1;i<=r1;i++) 
        if (ino[i]==pre[l2])
        {
            solve(l1,i-1,l2+1,l2+i-l1);
            solve(i+1,r1,l2+i-l1+1,r2);
            pos+=ino[i];
            break;
        }
} 
 
int main(void) 
{
    fin >> ino;
    fin >> pre;
 
    pos="";
 
    solve(0,ino.length()-1,0,pre.length()-1);
 
    fout << pos <<endl;
 
    return 0; 
}Written by xiaokan
/*
PROG:heritage
LANG:C++
*/
 
#include "stdio.h"
 
char preorder[27],inorder[27];
int n = 0;
 
void init()
{
    freopen("heritage.in","r",stdin);
    freopen("heritage.out","w",stdout);
    while (true)
    {
        scanf("%c",&inorder[++n]);
        if (inorder[n] == '\n')
        {
            n--;
            break;
        }
    }
    for(int i=1;i<=n;i++)
    scanf("%c",&preorder[i]);
}
 
int pos(char c,int x,int y)
{
    for(int i=x;i<=y;i++)
    if (inorder[i]==c) return i;
 
}
 
void print(int x1,int y1,int x2,int y2)
{
 
    if (x1>y1 || x2>y2) return;
 
    int p = pos(preorder[x1],x2,y2);
    print(x1+1,x1+p-x2,x2,p-1);
    print(x1+p-x2+1,y1,p+1,y2);
    printf("%c",preorder[x1]);
}
 
int main()
{
    init();
    print(1,n,1,n);
    printf("\n");
    return 0;
}/*
ID:dingyag1
LANG:C++
TASK:heritage
*/
 
#include <stdio.h>
#include <iostream>
#include <string.h>
 
using namespace std;
char MS[27],FS[27];		//MS先序 FS 中序  搞错了
struct node
{
	node *L,*R;
	char c;
};
 
 
void createtree(node *& tree,int begin1,int end1,int begin2,int end2)
{
		char c;
		int i,j;
 
		c=MS[begin1];
		tree=(node *)malloc(sizeof(node));
		(tree)->c=c;
 
		for (i=begin2;i<=end2;++i)
		{
			if (FS[i]==c)
			{
				break;
			}
		}
 
		if (i==begin2)
		{
			(tree)->L=NULL;
		}else
		{
			createtree((tree)->L,begin1+1,begin1+i-begin2,begin2,i-1);
		}
 
		if (i==end2)
		{
			(tree)->R=NULL;
		}else
		{
			createtree((tree)->R,begin1+i-begin2+1,end1,i+1,end2);
		}
 
 
}
 
void LVtree(node *tree)
{
	if (tree->L!=NULL)
	{
		LVtree(tree->L);
	}
	if (tree->R!=NULL)
	{
		LVtree(tree->R);
	}
	cout<<tree->c;
}
 
int main()
{
	freopen("heritage.in","r",stdin);
	freopen("heritage.out","w",stdout);
	node *tree;
	int len,begin1,end1,i,j,begin2,end2;
 
 
	scanf("%s",FS);
	scanf("%s",MS);
	len=strlen(MS);
	begin1=0;end1=len-1;
	begin2=0;end2=len-1;
	createtree(tree,begin1,end1,begin2,end2);
 
	LVtree(tree);
	cout<<endl;
 
 
	return 0;
}