/*
ID:ybojan2
LANG:C++
TASK:lamps
*/
 
#include <iostream>
#include <fstream>
 
using namespace std;
 
int main()
{
    ifstream fin("lamps.in");
    ofstream fout("lamps.out");
 
    int n,c,kai[101],guan[101],lk=0,lg=0,now[101],count=0,res[17][101];
    fin>>n>>c;
    int x;
    fin>>x;
    for (;x!=-1;)
    {
        lk++;
        kai[lk]=x;
        fin>>x;
    }
    fin>>x;
    for (;x!=-1;)
    {
        lg++;
        guan[lg]=x;
        fin>>x;
    }
    for (int i=1;i<=n;i++)
        now[i]=1;
    for (int i=1;i>=0;i--)
    {
        for (int s=1;s<=n;s++)
            now[s]=1-now[s];
        for (int j=1;j>=0;j--)
        {
            for (int s=1;s<=n;s+=2)
                now[s]=1-now[s];
            for (int k=1;k>=0;k--)
            {
                for (int s=2;s<=n;s+=2)
                    now[s]=1-now[s];
                for (int t=1;t>=0;t--)
                {
                    for (int s=1;s<=n;s+=3)
                        now[s]=1-now[s];
                    bool okay=true;
                    int ss=i+j+k+t;
                    if ((ss>c)||((ss%2)!=(c%2))) continue;
                    for (int s=1;s<=lk;s++)
                        if (now[kai[s]]==0) 
                        {
                                      okay=false;
                                      break;
                        }
                    for (int s=1;s<=lg;s++)
                        if (now[guan[s]]==1)
                        {
                                        okay=false;
                                        break;
                        }
                    if (okay)
                    { 
                             count++;
                             for (int s=1;s<=n;s++)
                                 res[count][s]=now[s];
                    }
                }
            }
        }
    }
    for (int i=1;i<=count;i++)
    {
        for (int j=i+1;j<=count;j++)
        {
            bool big=false;
            for (int k=1;k<=n;k++)
            {
                if (res[i][k]!=res[j][k])
                {
                                         big=(res[i][k]>res[j][k])?true:false;
                                         break;
                }
            }
            if (big)
            {
                    int tmp;
                    for (int k=1;k<=n;k++)
                    {
                        tmp=res[i][k];
                        res[i][k]=res[j][k];
                        res[j][k]=tmp;
                    }
            }
        }
    }
    for (int i=1;i<=count;i++)
    {
        for (int j=1;j<=n;j++)
            fout<<res[i][j];
        fout<<endl;
    }
    if (count==0) fout<<"IMPOSSIBLE"<<endl;
    return 0;
}/*
ID:GeorgeG1
PROB:lamps
LANG:C++
*/
/*
 
操作具有周期性-> 状态具有周期性-> 周期为6 
 
状态的记录，用位运算简化，用一个longint存储前6位的状态
 
操作1：异或(111111)2=63 
操作2：异或(010101)2=21 
操作3：异或(101010)2=42 
操作4：异或(001001)2=9 
 
判断状态是否符合题意:
先将题目给出的灯的状态映射到0～5之间，即(灯的编号-1)%6 
生成一个6位二进制数isOn，其中题目给出是ON的灯的对应位为1，其余为0 
生成一个6位二进制数isOff，其中题目给出是OFF的灯的对应位为0，其余为1 
若当前状态state满足： 
(state&isOn)==isOn && (state|isOff)==isOff
则state满足题目要求。 
 
 
另外，关于判断某一状态是否能有c次按键得到，如果某一状态能由x次按键得到，若c-x为偶数，则该状态进行c-x次操作1后状态不变。 
每种操作做最多一次，两次等于没做 ，故DFS枚举深度x最大为4
 
 
*/
#include <fstream>
#include <cstdlib>
#include <iostream>
 
using namespace std;
 
ifstream fin ("lamps.in");
ofstream fout ("lamps.out");
 
long operation[4]={63,21,42,9};
long isOn=0,isOff=2147483647;
long n,c;
long ans[300],top=-1;    //二进制存储状态，每个longint存6位。因为每个状态中N个longint值一样，故压缩为一个longint存储 
 
void DFS(long state,long levelLeft);   //搜索 
string bOut(long output);                //二进制输出 
bool stateCmp(long state);             //比较当前状态与题目要求是否一致 
void push(long state);                 //若当前状态不在ans数组中，则将当前状态记录到ans数组
bool cmp(long a,long b);               //sort的比较函数，升序排列 
 
int main()
{
    fin >>n >>c;
    long i;
    fin >>i;
    while (i!=-1)      //input
    {
          i=(i-1)%6;
          if (!((isOn>>i)&1)) isOn+=(1<<i);
          fin >>i;
    }
    fin >>i;
    while (i!=-1)
    {
          i=(i-1)%6;
          if ((isOff>>i)&1) isOff-=(1<<i);
          fin >>i;
    }
    DFS(63,(c<4)?c:4);       //DFS最大深度为(c<4)?c:4 
    if (top==-1)
    {
       fout <<"IMPOSSIBLE\n";
       return 0;
    }
    sort (ans,ans+top+1,cmp);
    for (long i=0;i<=top;i++)
    {
        fout <<bOut(ans[i]) <<endl;
    }
    return 0;
}
 
void DFS(long state,long levelLeft)
{
     if (stateCmp(state)==true && !((c-((c<4)?c:4)+levelLeft)&1)) push(state);
     if (levelLeft==0) return;
     levelLeft--;
 
     state^=operation[0];     //操作1
     DFS(state,levelLeft);
     state^=operation[0];     //反操作1
 
     state^=operation[1];     //操作2
     DFS(state,levelLeft);
     state^=operation[1];     //反操作2
 
     state^=operation[2];     //操作3
     DFS(state,levelLeft);
     state^=operation[2];     //反操作3
 
     state^=operation[3];     //操作4
     DFS(state,levelLeft);
     state^=operation[3];     //反操作4
 
     return;
}
 
long rev(long num)
{
     long t=0;
     for (long i=0;i<6;i++)
     {
         t+=((num>>i)&1)<<(6-i);
     }
     return t;
}
 
bool cmp(long a,long b)
{
     a=rev(a);           //由于状态存储方式和题目输出方式相反，比较时要将状态倒转 
      b=rev(b);
     if (a==b)
     {
        long offset=(c-1)%6+1;
        a>>=offset;
        b>>=offset;
        return a<b;
     }else return a<b;
}
 
void push (long state)
{
     for (long i=0;i<=top;i++)
         if (ans[i]==state) return;
     ans[++top]=state;
     return;
}
 
bool stateCmp(long state)
{
     return (state&isOn)==isOn && (state|isOff)==isOff;
}
 
string bOut(long output)
{
     string tmp="";
     string ans="";
     for (long i=0;i<6;i++)
     {
         tmp+='0'+(output&1);
         output>>=1;
     }
     for (long i=0;i<n/6;i++)
         ans+=tmp;
     ans+=tmp.substr(0,n%6);
     return ans;
}#include <fstream>
#include<bitset>
using namespace std;
ofstream fout ("lamps.out",ios::out);
ifstream fin ("lamps.in",ios::in);
int n,c,k,make[5]={0,63,42,21,36};
bool lon[7],loff[7],alln[65],ishave=false;
int dfs(int lev,int sta,int tot)
{
	int zt=sta;
	bool istrue=true;
	if(lev>5) return 0;
	if(tot<=c)
	{
		for(int i=1;i<=6;i++)
		{
			if (lon[i]) if (!((sta>>(6-i))&1)) {istrue=false;break;}
			if (loff[i]) if ((sta>>(6-i))&1) {istrue=false;break;}
		}
		if(istrue){
						alln[sta]=true;
						ishave=true;
					}
	}
	sta^=make[lev];
	dfs(lev+1,sta,tot+1); //按
	dfs(lev+1,zt,tot); //不按
	return 0;
}
int main()
{
	fin>>n>>c;
	fin>>k;
	while (k!=-1)
	{
		k%=6;
		if(k==0) k=6;
		lon[k]=true;
		fin>>k;
	}
	fin>>k;
	while (k!=-1)
	{
		k%=6;
		if(k==0) k=6;
                loff[k]=true;
                fin>>k;
         }
        dfs(1,63,0);
        if (!ishave) fout<<"IMPOSSIBLE"<<endl;
        else {	
        for(int i=0;i<=63;i++)
        if(alln[i])
        {
          k=i;
          for(int j=1;j<=(n/6);j++)
          fout<<bitset<6>(i); //bitset不可仪用变量
            if(n%6!=0) {
                        k>>=(6-(n%6));
                        switch (n%6)
                       {
                         case(1):fout<<bitset<1>(k)<<endl;break;
                         case(2):fout<<bitset<2>(k)<<endl;break;
                         case(3):fout<<bitset<3>(k)<<endl;break;
                         case(4):fout<<bitset<4>(k)<<endl;break;
                         case(5):fout<<bitset<5>(k)<<endl;break;
                        }
                       }
          else fout<<endl;
        }
        }
   return 0;
}/*
ID:   talenth1
PROG: lamps
LANG: C++
*/
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
int n,c,light[10][10]={
                       {},
                       {0,0,0,0,0,0,0},
                       {0,0,0,1,1,1,0},
                       {0,0,1,0,1,0,1},
                       {0,0,1,1,0,1,1},
                       {0,1,0,0,1,0,0},
                       {0,1,0,1,0,1,0},
                       {0,1,1,0,0,0,1},
                       {0,1,1,1,1,1,1},
                       };
int minnum[50]={0,1,2,1,1,2,1,2,0};
int in[101];
int main()
{
      freopen("lamps.in","r",stdin);
      freopen("lamps.out","w",stdout);
      int i,j,k,t,p,q;
      scanf("%d%d",&n,&c);
      for(i=1;i<=n;i++)
       in[i]=-1;
      while(1)
      {
        scanf("%d",&t);
        if(t!=-1)in[t]=1;
        else break;
      }
      while(1)
      {
        scanf("%d",&t);
        if(t!=-1)in[t]=0;
        else break;
      }
      q=0;
      for(k=1;k<=8;k++) 
      {
        p=1;
        for(i=1;i<=n;i++)
        {
         if(in[i]==-1)continue;
         t=i%6;
         if(t==0)t=6;
         if(in[i]!=light[k][t]){p=0;break;}
        } 
        if(p==1&&c>=minnum[k]){
                 q=1;
                 for(j=1;j<=n;j++)
                  {
                  t=j%6;
                  if(t==0)t=6;
                  printf("%d",light[k][t]);
                  }
                 printf("\n");
               }
      }
      if(q==0)printf("IMPOSSIBLE\n");
      return 0;      
}/*
	ID:echooat1
	LANG:C++
	TASK:lamps
	*/
#include <fstream>
#include <cstdlib>
#include <cstring>
using namespace std;
long c,n,on[101]={0},off[101]={0};
bool a[9][102]={0};
ifstream fin("lamps.in");
ofstream fout("lamps.out");
bool ok(bool*a){
	for(long i=1;i<=on[0];i++)
		if(!a[on[i]])return false;
	for(long i=1;i<=off[0];i++)
		if(a[off[i]])return false;
	return true;
	}
long bo=false;
void ppp(bool *a){
	bo=true;
	for(long i=1;i<=n;i++)fout <<a[i];
	fout <<endl;
}
int main(int argc,char** argv){
	fin >>n>>c;
	bool hash[10][102]={false};
	memset(a,1,sizeof(a));
	for(long i=1;i<=n;i++)hash[1][i]=1;
	for(long i=1;i<=n;i=i+2)hash[3][i]=1;
	for(long i=1;i<=n;i=i+3)hash[4][i]=1;
	for(long i=2;i<=n;i=i+3){hash[5][i]=1;hash[5][i+1]=1;}
	for(long i=2;i<=n;i+=2)hash[6][i]=1;
	for(long i=1;i<=n;i++){
		hash[2][i]=hash[6][i];
		if((i-1)%3==0)
			hash[2][i]^=1;
	}
	for(long i=1;i<=n;i++)
		hash[7][i]=hash[2][i]^1;
	long temp;
	fin >>temp;
	while(temp!=-1){
		on[++on[0]]=temp;
		fin >>temp;
	}
	fin >>temp;
	while(temp!=-1){
		off[++off[0]]=temp;
		fin >>temp;
	}
	if(c==1){
		bool now[102];
		memset(now,1,sizeof now);
		for(long i=1;i<=n;i++)now[i]^=hash[1][i];
		if(ok(now))ppp(now);
		memset(now,1,sizeof now);
		for(long i=1;i<=n;i++)now[i]^=hash[3][i];
		if(ok(now))ppp(now);
		for(long k=4;k<=6;k+=2){
			memset(now,1,sizeof now);
			for(long i=1;i<=n;i++)now[i]^=hash[k][i];
			if(ok(now)){bo=true;ppp(now);}
		}
	}
	else if(c!=0){
		for(long k=1;k<=8;k++){
			if(k==4&&c==2)continue;
			bool now[102];
			memset(now,1,sizeof now);
			for(long i=1;i<=n;i++)
				now[i]^=hash[k][i];
			if(ok(now))
				{ppp(now);bo=true;}
			}
	}
	if(c==0){
		bool now[102];memset(now,1,sizeof now);
		if(ok(now))ppp(now);
		}
	if(!bo)fout <<"IMPOSSIBLE"<<endl;
	fin.close();fout.close();
	return 0;
}