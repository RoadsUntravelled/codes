/*
ID: cmykrgb1
PROG: tour
LANG: C++
*/
//Written By CmYkRgB123
#include <iostream>
#include <fstream>
#include <string>
#define MAXN 101
#define INF 0x7FFFFFFF
 
using namespace std;
 
ifstream fi("tour.in");
ofstream fo("tour.out");
 
bool adj[MAXN][MAXN];
int f[MAXN][MAXN];
string City[MAXN];
int N,ans;
 
inline int getnum(string &s)
{
	for (int i=1;i<=N;i++)
		if (s==City[i])
			return i;
}
 
void init()
{
	int i,V,d1,d2;
	string C1,C2;
	fi >> N >> V;
	for (i=1;i<=N;i++)
		fi >> City[i];
	for (i=1;i<=V;i++)
	{
		fi >> C1 >> C2;
		adj[d2][d1]=adj[d1=getnum(C1)][d2=getnum(C2)]=true;
	}
}
 
void dynamic()
{
	int i,j,k;
	f[1][1]=1;
	for (i=1;i<=N;i++)
	{
		for (j=i+1;j<=N;j++)
		{
			f[i][j]=-INF;
			for (k=1;k<j;k++)
			{
				if (adj[k][j] && f[i][k]>0 && f[i][k]>f[i][j])
					f[i][j]=f[i][k];
			}
			f[j][i]=++f[i][j];
			j=j;
		}
	}
}
 
void print()
{
	int i;
	ans=1;
	for (i=1;i<N;i++)
		if (adj[i][N] && f[i][N]>ans)
			ans=f[i][N];
	fo << ans << endl;
	fi.close();
	fo.close();
}
 
int main()
{
	init();
	dynamic();
	print();
	return 0;
}网络流
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <cstring>
using namespace std;
const int MAXN=1001,MAXM=MAXN*4*2,INF=~0U>>1;
struct Queue
{
	int Q[MAXN],head,tail,size;
	bool inq[MAXN];
	void init()
	{
		memset(inq,0,sizeof(inq));
		head = size =0; tail = -1;
	}
	void ins(int p)
	{
		size++;
		if (++tail == MAXN) tail = 0;
		Q[tail] = p;
		inq[p]=true;
	}
	int pop()
	{
		size--;
		int p=Q[head];
		if (++head == MAXN) head = 0;
		inq[p]=false;
		return p;
	}
}Q;
struct edge
{
	edge *next,*op;
	int t,c,v;
}*V[MAXN],ES[MAXM],*fe[MAXN];
char City[MAXN][16];
int N,M,S,T,EC,Ans,Costflow;
int dist[MAXN],ft[MAXN];
inline void addedge(int a,int b,int c,int v)
{
	ES[++EC].next = V[a]; V[a]=ES+EC; V[a]->t=b; V[a]->c=c; V[a]->v=v;
	ES[++EC].next = V[b]; V[b]=ES+EC; V[b]->t=a; V[b]->c=0; V[b]->v=-v;
	V[a]->op = V[b]; V[b]->op = V[a];
}
int getcity(char *s)
{
	for (int i=1;i<=N;i++)
		if (strcmp(s,City[i])==0)
			return i;
	return -1;
}
void init()
{
	int i,a,b;
	char name[16];
	freopen("tour.in","r",stdin);
	freopen("tour.out","w",stdout);
	scanf("%d%d",&N,&M);
	for (i=1;i<=N;i++)
	{
		scanf("%s",City[i]);
		if (i==1 || i==N)
			addedge(i,i+N,2,-1);
		else
			addedge(i,i+N,1,-1);
	}
	for (i=1;i<=M;i++)
	{
		scanf("%s",name);a=getcity(name);
		scanf("%s",name);b=getcity(name);
		if (a<b)
			addedge(a+N,b,1,0);
		else
			addedge(b+N,a,1,0);
	}
	S=1; T=N+N;
}
bool SPFA()
{
	int i,j;
	for (i=S;i<=T;i++)
		dist[i]=INF;
	dist[S]=0;
	Q.ins(S);
	while (Q.size)
	{
		i=Q.pop();
		for (edge *e=V[i];e;e=e->next)
		{
			j=e->t;
			if (e->c && dist[i] + e->v < dist[j])
			{
				dist[j] = dist[i] + e->v;
				ft[j] = i;
				fe[j] = e;
				if (!Q.inq[j])
					Q.ins(j);
			}
		}
	}
	return dist[T]!=INF;
}
void Augment()
{
	int i,delta=INF;
	for (i=T;i!=S;i=ft[i])
		if (fe[i]->c < delta)
			delta = fe[i]->c;
	for (i=T;i!=S;i=ft[i])
	{
		fe[i]->c -= delta;
		fe[i]->op->c += delta;
		Costflow += fe[i]->v * delta;
	}
}
void SPFAFlow()
{
	Q.init();
	while (SPFA())
		Augment();
}
 
int main()
{
	init();
	SPFAFlow();
	Costflow =-Costflow;
	Costflow -= 2;
	if (ES[1].c!=0)
		Costflow = 1;
	printf("%d\n",Costflow);
	return 0;
}刚开始写时，心中牢牢记着算法导论上的“最长简单路径是NP”问题，
然后坚定不移的对此题进行搜索，经过无数次努力仍然TLE后，
我无奈看了题解，没想到正解就是当时心中一闪而过的传纸条模型，orz
 
Compiling...
Compile: OK
 
Executing...
   Test 1: TEST OK [0.011 secs, 3064 KB]
   Test 2: TEST OK [0.000 secs, 3064 KB]
   Test 3: TEST OK [0.000 secs, 3064 KB]
   Test 4: TEST OK [0.000 secs, 3064 KB]
   Test 5: TEST OK [0.022 secs, 3064 KB]
   Test 6: TEST OK [0.000 secs, 3064 KB]
   Test 7: TEST OK [0.011 secs, 3064 KB]
   Test 8: TEST OK [0.011 secs, 3064 KB]
   Test 9: TEST OK [0.000 secs, 3064 KB]
   Test 10: TEST OK [0.022 secs, 3064 KB]
   Test 11: TEST OK [0.022 secs, 3064 KB]
 
All tests OK.
 
 
 
/*
	ID:echooat1
	TASK:tour
	LANG:C++
	*/
#include <fstream>
#include <cstring>
#define max(a,b) ((a)>(b)?(a):(b))
#define V 103
using namespace std;
ifstream fin("tour.in");ofstream fout("tour.out");
long n=0,m=0;
string ap[V];
bool c[V][V]={0},hash[V]={0};int a[V][V]={0};
long find(string st){
	for(long i=1;i<=n;i++)
		if(ap[i]==st)return i;
	return 0;
	}
int main(int argc,char** argv){
	fin >>n>>m;fin.get();
	for(long i=1;i<=n;i++){
		string st;
		getline(fin,st);
		ap[i]=st;
	}
	while(m--){
		string st,ss;
		fin >>st>>ss;fin.get();
		long l1=find(st),l2=find(ss);
		if(l2<l1)
		a[l1][++a[l1][0]]=l2;else a[l2][++a[l2][0]]=l1;c[l1][l2]=c[l2][l1]=1;
	}
	long f[V][V]={0};f[1][1]=1;
	for(long i=1;i<n;i++)
		for(long j=i+1;j<=n;j++){
			long temp=0;bool bo=0;
			for(long k=1;k<=a[j][0];k++){
				if(temp<f[i][a[j][k]]){temp=f[i][a[j][k]];
				bo=true;}
			}
			if(bo)
			f[j][i]=f[i][j]=temp+1;else f[i][j]=f[j][i]=-0x7fffffff;
		}
	long mi=0;
	for(long i=1;i<=a[n][0];i++)
			mi=max(mi,f[a[n][i]][n]);
	if(mi)
	fout <<mi<<endl;else fout<<1<<endl;
	fin.close();fout.close();
	return 0;
}